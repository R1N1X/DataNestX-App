frontend\src\components\Layout\Footer.tsx:
import React from "react";
import { Link } from "react-router-dom";
import { Github, Twitter, Linkedin } from "lucide-react";

export const Footer: React.FC = () => {
  return (
    <footer className="bg-background border-t border-gray-200 mt-12">
      <div className="max-w-7xl mx-auto px-4 py-12 grid grid-cols-1 gap-10 md:grid-cols-4">

        {/* Brand */}
        <div className="md:col-span-1">
          <div className="flex items-center gap-2 mb-4">
            <img
              src="/DataNestX_Logo.png"
              alt="DataNestX logo"
              className="w-32 h-32 object-contain"
            />
          </div>
          <p className="text-sm text-muted-foreground leading-relaxed">
            A trusted marketplace to buy and sell exclusive, high-quality datasets.
            Connect data creators with data seekers worldwide.
          </p>
          <div className="flex gap-4 mt-6">
            <a
              href="#"
              aria-label="Twitter"
              className="text-muted-foreground hover:text-primary transition-colors"
              target="_blank"
              rel="noopener noreferrer"
            >
              <Twitter className="h-5 w-5" />
            </a>
            <a
              href="#"
              aria-label="GitHub"
              className="text-muted-foreground hover:text-primary transition-colors"
              target="_blank"
              rel="noopener noreferrer"
            >
              <Github className="h-5 w-5" />
            </a>
            <a
              href="#"
              aria-label="LinkedIn"
              className="text-muted-foreground hover:text-primary transition-colors"
              target="_blank"
              rel="noopener noreferrer"
            >
              <Linkedin className="h-5 w-5" />
            </a>
          </div>
        </div>

        {/* Marketplace */}
<nav aria-label="Marketplace">
  <h3 className="text-sm font-semibold text-primary mb-4">Marketplace</h3>
  <ul className="space-y-3 text-sm">
    <li>
      <Link to="/marketplace" className="hover:text-primary transition-colors">
        Browse Datasets
      </Link>
    </li>
  </ul>
</nav>

        {/* For Sellers */}
        <nav aria-label="For Sellers">
          <h3 className="text-sm font-semibold text-primary mb-4">For Sellers</h3>
          <ul className="space-y-3 text-sm">
            <li>
              <Link to="/upload-dataset" className="hover:text-primary transition-colors">
                Upload Dataset
              </Link>
            </li>
            <li>
              <Link to="/seller-guide" className="hover:text-primary transition-colors">
                Seller Guide
              </Link>
            </li>
            <li>
              <Link to="/pricing" className="hover:text-primary transition-colors">
                Pricing Guidelines
              </Link>
            </li>
            <li>
              <Link to="/quality-standards" className="hover:text-primary transition-colors">
                Quality Standards
              </Link>
            </li>
          </ul>
        </nav>

        {/* Support */}
        <nav aria-label="Support">
          <h3 className="text-sm font-semibold text-primary mb-4">Support</h3>
          <ul className="space-y-3 text-sm">
            <li>
              <Link to="/help" className="hover:text-primary transition-colors">
                Help Center
              </Link>
            </li>
            <li>
              <Link to="/contact" className="hover:text-primary transition-colors">
                Contact Us
              </Link>
            </li>
            <li>
              <Link to="/privacy" className="hover:text-primary transition-colors">
                Privacy Policy
              </Link>
            </li>
            <li>
              <Link to="/terms" className="hover:text-primary transition-colors">
                Terms of Service
              </Link>
            </li>
          </ul>
        </nav>
      </div>

      <div className="border-t border-gray-200 mt-12 py-6 text-center text-sm">
        <span className="text-primary font-semibold">
          Â© {new Date().getFullYear()} DataNestX
        </span>. All rights reserved.
      </div>
    </footer>
  );
};

frontend\src\components\Layout\Layout.tsx:
import React from 'react';
import { Navbar } from './Navbar';
import { Footer } from './Footer';

export interface LayoutProps {
  children: React.ReactNode;
  showFooter?: boolean;
}

export const Layout: React.FC<LayoutProps> = ({ children, showFooter = true }) => {
  return (
    <div className="min-h-screen flex flex-col bg-background">
      <Navbar />
      <main className="flex-1">
        {children}
      </main>
      {showFooter && <Footer />}
    </div>
  );
};

frontend\src\components\Layout\Navbar.tsx:
import React from "react";
import { Link, useNavigate } from "react-router-dom";
import { motion } from "framer-motion";
import { Button } from "@/components/ui/button";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { useAuth } from "@/contexts/AuthContext";
import { User as UserIcon, LogOut, Settings, Plus, Search, MessageSquare } from "lucide-react";

export const Navbar: React.FC = () => {
  const { user, logout } = useAuth();
  const navigate = useNavigate();

  const handleLogout = () => {
    logout();
    navigate("/");
  };

  const getDashboardPath = () =>
    user?.role === "buyer" ? "/buyer-dashboard" : "/seller-dashboard";

  const getUploadPath = () =>
    user?.role === "buyer" ? "/post-request" : "/upload-dataset";

  const getHomeRedirect = () => {
    if (!user) return "/";
    return user.role === "buyer" ? "/buyer-dashboard" : "/seller-dashboard";
  };

  return (
    <motion.nav
      initial={{ y: -100 }}
      animate={{ y: 0 }}
      className="sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur-sm"
    >
      <div className="container mx-auto flex h-16 items-center justify-between px-4 sm:px-6 lg:px-8">
        <Link to={getHomeRedirect()} className="flex items-center">
          <img
            src="/DataNestX_Logo.png"
            alt="DataNestX"
            className="w-32 h-32 object-contain" // Matched size from your old code
          />
        </Link>

        <div className="hidden md:flex items-center gap-6 text-sm font-medium">
          <Link to="/marketplace" className="flex items-center gap-1.5 hover:text-primary transition-colors">
            <Search className="h-4 w-4" />
            Browse Datasets
          </Link>
          {user && (
            <Link to={getUploadPath()} className="flex items-center gap-1.5 hover:text-primary transition-colors">
              <Plus className="h-4 w-4" />
              {user.role === "buyer" ? "Post Request" : "Upload Dataset"}
            </Link>
          )}
        </div>

        <div className="flex items-center gap-3">
          {user ? (
            <>
              <Button variant="ghost" size="icon" onClick={() => navigate('/messages')}>
                <MessageSquare className="h-5 w-5" />
              </Button>
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button variant="ghost" className="relative h-10 w-10 rounded-full">
                    <Avatar className="h-10 w-10">
                      <AvatarImage src={user.avatarUrl || ""} alt={user.name} />
                      <AvatarFallback>{user.name?.charAt(0).toUpperCase()}</AvatarFallback>
                    </Avatar>
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end" className="w-56">
                  <DropdownMenuLabel>
                    <div className="font-normal">
                      <p className="text-sm font-medium leading-none">{user.name}</p>
                      <p className="text-xs leading-none text-muted-foreground">{user.email}</p>
                    </div>
                  </DropdownMenuLabel>
                  <DropdownMenuSeparator />
                  <DropdownMenuItem onClick={() => navigate(getDashboardPath())}>
                    <UserIcon className="mr-2 h-4 w-4" />
                    <span>Dashboard</span>
                  </DropdownMenuItem>
                  <DropdownMenuItem onClick={() => navigate("/settings")}>
                    <Settings className="mr-2 h-4 w-4" />
                    <span>Settings</span>
                  </DropdownMenuItem>
                  <DropdownMenuSeparator />
                  <DropdownMenuItem onClick={handleLogout}>
                    <LogOut className="mr-2 h-4 w-4" />
                    <span>Log out</span>
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            </>
          ) : (
            <div className="flex items-center gap-2">
              <Button variant="ghost" asChild>
                <Link to="/auth">Sign In</Link>
              </Button>
              <Button asChild>
                <Link to="/auth?mode=register">Get Started</Link>
              </Button>
            </div>
          )}
        </div>
      </div>
    </motion.nav>
  );
};

frontend\src\components\DatasetCard.tsx:
// frontend/src/components/DatasetCard.tsx
import React from "react";
import { motion } from "framer-motion";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Star, ShoppingCart, Download } from "lucide-react"; // FIX: Imported Download icon
import { Link } from "react-router-dom";
import { Dataset as DatasetType, User } from '@/types';
import { useAuth } from "@/contexts/AuthContext";
import { useToast } from "@/hooks/use-toast";
import axios from 'axios';
import { saveAs } from 'file-saver';

const API_URL = 'http://localhost:5000/api';

interface DatasetCardProps {
    dataset: DatasetType;
    index?: number;
}

export const DatasetCard: React.FC<DatasetCardProps> = ({ dataset, index = 0 }) => {
    const { user } = useAuth();
    const { toast } = useToast();
    const seller: User | null = (dataset && typeof dataset.seller === "object") ? (dataset.seller as User) : null;

    const isOwner = user && seller && user.id === seller._id;

    // NEW: Function to handle dataset download for the owner
    const handleDownload = async () => {
        try {
            const token = localStorage.getItem('token');
            if (!token) {
                toast({ title: 'Authentication Required', variant: 'destructive' });
                return;
            }
            toast({ title: 'Downloading...', description: `Preparing ${dataset.file.filename} for download.` });
            const response = await axios.get(`${API_URL}/datasets/download/${dataset._id}`, {
                headers: { Authorization: `Bearer ${token}` },
                responseType: 'blob',
            });
            saveAs(response.data, dataset.file.filename);
            toast({ title: 'Download Successful', description: `${dataset.file.filename} has been downloaded.` });
        } catch (err: any) {
            const errorMessage = err?.response?.data?.error || 'Download failed';
            toast({ title: 'Download Failed', description: errorMessage, variant: 'destructive' });
        }
    };

    return (
        <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: (index || 0) * 0.05 }}
            className="h-full"
        >
            <Card className="h-full flex flex-col overflow-hidden rounded-lg border shadow-sm hover:shadow-lg transition-shadow duration-300">
                <CardHeader className="p-4">
                    <div className="flex justify-between items-start">
                        <div className="flex flex-wrap gap-2">
                            <Badge variant="secondary">{dataset.category}</Badge>
                            <Badge variant="outline">{dataset.format}</Badge>
                        </div>
                    </div>
                    <CardTitle className="pt-2 text-lg font-semibold line-clamp-2">
                        <Link to={`/dataset/${dataset._id}`} className="hover:underline">{dataset.title}</Link>
                    </CardTitle>
                </CardHeader>

                <CardContent className="flex-grow flex flex-col p-4 pt-0">
                    <p className="text-sm text-muted-foreground mb-4 line-clamp-3 flex-grow">
                        {dataset.description}
                    </p>

                    <div className="grid grid-cols-3 text-center gap-4 my-4 py-3 border-t border-b">
                        <div>
                            <p className="font-semibold">{dataset.downloads || 0}</p>
                            <p className="text-xs text-muted-foreground">Downloads</p>
                        </div>
                        <div>
                            <p className="font-semibold flex items-center justify-center">
                                <Star className="h-4 w-4 mr-1 text-amber-400 fill-amber-400" />
                                {seller?.rating || 'N/A'}
                            </p>
                            <p className="text-xs text-muted-foreground">Rating</p>
                        </div>
                        <div>
                            <p className="font-semibold">
                                {new Date(dataset.updatedAt).toLocaleDateString()}
                            </p>
                            <p className="text-xs text-muted-foreground">Updated</p>
                        </div>
                    </div>

                    {seller && (
                        <div className="flex items-center gap-3 mb-4">
                            <Avatar className="h-10 w-10">
                                <AvatarImage src={seller.avatarUrl || ""} />
                                <AvatarFallback>{seller.name?.charAt(0)}</AvatarFallback>
                            </Avatar>
                            <div>
                                <p className="text-sm font-semibold">{seller.name}</p>
                                <p className="text-xs text-muted-foreground">{seller?.totalDatasets || 0} datasets</p>
                            </div>
                        </div>
                    )}

                    <div className="mt-auto flex flex-col gap-2">
                        <div className="text-2xl font-bold text-right">
                            {dataset.price === 0 ? 'Free' : `$${dataset.price}`}
                        </div>
                        {/* FIX: Conditionally render Download or Buy Now button */}
                        {isOwner ? (
                            <Button variant="outline" onClick={handleDownload} className="w-full">
                                <Download className="h-4 w-4 mr-2" />
                                Download Your File
                            </Button>
                        ) : (
                            <Button asChild className="w-full">
                                <Link to={`/checkout/${dataset._id}`}>
                                    <ShoppingCart className="h-4 w-4 mr-2" />
                                    Buy Now
                                </Link>
                            </Button>
                        )}
                    </div>
                </CardContent>
            </Card>
        </motion.div>
    );
};

frontend\src\components\RequestCard.tsx:
import React from 'react';
import { motion } from 'framer-motion';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import {
  Star,
  Users,
  Clock,
  Calendar,
  DollarSign,
  Bookmark,
  AlertCircle,
  TrendingUp
} from 'lucide-react';
import { DatasetRequest, User } from '@/types'; // Import types from the new file
import { Link } from 'react-router-dom';

interface RequestCardProps {
  request: DatasetRequest;
  index?: number;
  proposalCount?: number;
}

export const RequestCard: React.FC<RequestCardProps> = ({ request, index = 0, proposalCount }) => {
  const [isBookmarked, setIsBookmarked] = React.useState(false);

  const displayProposalCount = proposalCount !== undefined
    ? proposalCount
    : (Array.isArray(request.proposals) ? request.proposals.length : 0);

  const buyer: User =
    request && typeof request.buyer === 'object' && request.buyer !== null
      ? (request.buyer as User)
      : {
          id: typeof request.buyer === 'string' ? request.buyer : '',
          _id: typeof request.buyer === 'string' ? request.buyer : undefined, // NEW: Added _id
          name: "Unknown Buyer",
          email: "",
          role: 'buyer',
          avatarUrl: "", // Corrected to avatarUrl
          rating: 0
        };

  const daysLeft = Math.max(
    0,
    Math.ceil(
      (new Date(request.deadline).getTime() - Date.now()) / (1000 * 60 * 60 * 24)
    )
  );
  const isUrgent = daysLeft <= 7 && request.status === 'open';

  const handleBookmark = (e: React.MouseEvent) => {
    e.stopPropagation();
    setIsBookmarked(!isBookmarked);
  };

  const getStatusColor = (status: string | undefined) => {
    switch (status) {
      case 'open': return 'bg-accent-teal/10 text-accent-teal border-accent-teal/30';
      case 'in_progress': return 'bg-accent-amber/10 text-accent-amber border-accent-amber/30';
      case 'fulfilled': return 'bg-success/10 text-success border-success/30';
      case 'cancelled': return 'bg-destructive/10 text-destructive border-destructive/30';
      default: return 'bg-muted text-muted-foreground';
    }
  };

  const postedDate = request.createdAt || ""; // Corrected to use createdAt

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{
        duration: 0.4,
        delay: index * 0.1,
        type: "spring",
        stiffness: 100
      }}
      whileHover={{ y: -8 }}
      className="group cursor-pointer"
    >
      <Card className="h-full border-0 shadow-soft hover:shadow-hover transition-all duration-500 group-hover:border-primary/20 overflow-hidden">
        <div className="relative p-6 pb-4">
          <div className="flex items-start justify-between mb-4">
            <div className="flex-1">
              <div className="flex items-center space-x-2 mb-3">
                <Badge
                  variant="secondary"
                  className="text-xs bg-gradient-to-r from-primary/10 to-accent-pink/10 border-primary/20"
                >
                  {request.category || 'Uncategorized'}
                </Badge>
                <Badge
                  className={`text-xs capitalize ${getStatusColor(request.status)}`}
                >
                  {(request.status || 'open').replace('_', ' ')}
                </Badge>
                {displayProposalCount > 10 && (
                  <Badge
                    variant="outline"
                    className="text-xs border-accent-orange/30 text-accent-orange"
                  >
                    <TrendingUp className="w-3 h-3 mr-1" />
                    Hot
                  </Badge>
                )}
              </div>
              <h3 className="text-lg font-semibold text-foreground mb-2 group-hover:text-primary transition-colors line-clamp-2 leading-tight">
                {request.title || 'Untitled Request'}
              </h3>
            </div>
            <Button
              size="sm"
              variant="ghost"
              className="h-8 w-8 p-0 opacity-60 group-hover:opacity-100 hover:bg-accent-teal/10 hover:text-accent-teal ml-4"
              onClick={handleBookmark}
            >
              <Bookmark className={`h-4 w-4 ${isBookmarked ? 'fill-current text-accent-teal' : ''}`} />
            </Button>
          </div>

          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center space-x-2">
              <DollarSign className="h-4 w-4 text-muted-foreground" />
              <div className="text-lg font-bold text-foreground">
                ${request.budget?.min?.toLocaleString() ?? 0} - ${request.budget?.max?.toLocaleString() ?? 0}
              </div>
            </div>
            {isUrgent && (
              <Badge className="bg-pink-500/10 text-pink-600 border-pink-300/30">
                <AlertCircle className="w-3 h-3 mr-1" />
                Urgent
              </Badge>
            )}
          </div>
        </div>

        <CardContent className="px-6 pb-6">
          <p className="text-sm text-muted-foreground mb-4 line-clamp-3 leading-relaxed">
            {request.description || ''}
          </p>

          <div className="grid grid-cols-3 gap-4 mb-6 py-4 border-t border-b border-border/50">
            <div className="text-center group/stat">
              <div className="flex items-center justify-center text-accent-pink mb-2 group-hover/stat:scale-110 transition-transform">
                <Users className="h-4 w-4" />
              </div>
              <div className="text-sm font-medium text-foreground">{displayProposalCount}</div>
              <div className="text-xs text-muted-foreground">proposals</div>
            </div>
            <div className="text-center group/stat">
              <div className={`flex items-center justify-center mb-2 group-hover/stat:scale-110 transition-transform ${isUrgent ? 'text-pink-600' : 'text-accent-teal'}`}>
                <Clock className="h-4 w-4" />
              </div>
              <div className={`text-sm font-medium ${isUrgent ? 'text-pink-600' : 'text-foreground'}`}>
                {daysLeft}
              </div>
              <div className="text-xs text-muted-foreground">days left</div>
            </div>
            <div className="text-center group/stat">
              <div className="flex items-center justify-center text-accent-amber mb-2 group-hover/stat:scale-110 transition-transform">
                <Calendar className="h-4 w-4" />
              </div>
              <div className="text-sm font-medium text-foreground">
                {postedDate
                  ? new Date(postedDate).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })
                  : 'â'}
              </div>
              <div className="text-xs text-muted-foreground">posted</div>
            </div>
          </div>

          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center space-x-3">
              <Avatar className="h-10 w-10 border-2 border-primary/20">
                <AvatarImage src={buyer.avatarUrl || ""} />
                <AvatarFallback className="bg-gradient-to-br from-primary/20 to-accent-pink/20 text-primary font-medium">
                  {(buyer.name ?? "U").charAt(0)}
                </AvatarFallback>
              </Avatar>
              <div>
                <div className="text-sm font-medium text-foreground group-hover:text-primary transition-colors">
                  {buyer.name || 'Unknown Buyer'}
                </div>
                <div className="flex items-center space-x-1 text-xs text-muted-foreground">
                  <Star className="h-3 w-3 fill-accent-amber text-accent-amber" />
                  <span>{buyer.rating ?? '-'}</span>
                  <span>â¢</span>
                  <span>Verified buyer</span>
                </div>
              </div>
            </div>
          </div>

          <div className="flex flex-wrap gap-2 mb-6">
            {(request.tags ?? []).slice(0, 3).map((tag) => (
              <Badge
                key={tag}
                variant="outline"
                className="text-xs hover:bg-primary/10 hover:border-primary/30 hover:text-primary transition-colors cursor-pointer"
              >
                {tag}
              </Badge>
            ))}
            {request.tags && request.tags.length > 3 && (
              <Badge variant="outline" className="text-xs text-muted-foreground">
                +{request.tags.length - 3} more
              </Badge>
            )}
          </div>

          <div className="flex space-x-2">
            <Button className="flex-1 gradient-primary hover-glow" size="sm">
              View Details
            </Button>
            <Button variant="outline" size="sm"
              className="hover:bg-accent-teal/10 hover:text-accent-teal hover:border-accent-teal/30">
              Submit Proposal
            </Button>
          </div>
        </CardContent>
      </Card>
    </motion.div>
  );
};

frontend\src\contexts\AuthContext.tsx:
// frontend/src/contexts/AuthContext.tsx
import React, { createContext, useContext, useState, useEffect } from 'react';
// Import the User type from our central types file
import { User } from '@/types';

// The AuthUser is now simply our central User type
export type AuthUser = User;

interface AuthContextType {
  user: AuthUser | null;
  login: (email: string, password: string) => Promise<{ success: boolean; error?: string; }>;
  register: (email: string, password: string, name: string, role: 'buyer' | 'seller') => Promise<{ success: boolean; error?: string; }>;
  logout: () => void;
  isLoading: boolean; // Correctly named
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<AuthUser | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  // On initial load, check for a user in localStorage to persist session
  useEffect(() => {
    const storedUser = localStorage.getItem('user');
    const storedToken = localStorage.getItem('token');
    
    if (storedUser && storedToken) {
      try {
        const parsedUser: AuthUser = JSON.parse(storedUser);
        setUser(parsedUser);
      } catch (e) {
        console.error("Failed to parse user from localStorage", e);
        // Clear invalid data if parsing fails
        localStorage.clear();
      }
    }
    setIsLoading(false);
  }, []);

  // A helper function to handle successful authentication
  const handleAuthSuccess = (data: any): AuthUser => {
    const authenticatedUser: AuthUser = {
      id: data.user.id,
      _id: data.user.id, // Assuming id and _id are the same from backend for consistency
      email: data.user.email,
      name: data.user.name,
      role: data.user.role,
      avatarUrl: data.user.avatarUrl, // Use standardized 'avatarUrl'
    };
    localStorage.setItem('token', data.token);
    localStorage.setItem('user', JSON.stringify(authenticatedUser));
    setUser(authenticatedUser);
    return authenticatedUser;
  };

  const login = async (email: string, password: string) => {
    setIsLoading(true);
    try {
      const res = await fetch('http://localhost:5000/api/auth/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, password }),
      });
      const data = await res.json();
      if (!res.ok) throw new Error(data.error || 'Login failed.');
      
      handleAuthSuccess(data);
      return { success: true };
    } catch (err: any) {
      return { success: false, error: err.message };
    } finally {
      setIsLoading(false);
    }
  };

  const register = async (email: string, password: string, name: string, role: 'buyer' | 'seller') => {
    setIsLoading(true);
    try {
      const res = await fetch('http://localhost:5000/api/auth/register', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ name, email, password, role }),
      });
      const data = await res.json();
      if (!res.ok) throw new Error(data.error || 'Registration failed.');

      handleAuthSuccess(data);
      return { success: true };
    } catch (err: any) {
      return { success: false, error: err.message };
    } finally {
      setIsLoading(false);
    }
  };

  const logout = () => {
    setUser(null);
    localStorage.removeItem('user');
    localStorage.removeItem('token');
  };

  return (
    <AuthContext.Provider value={{ user, login, register, logout, isLoading }}>
      {children}
    </AuthContext.Provider>
  );
};
frontend\src\data\constants.ts:
export const datasetFileTypes = [
  'CSV',
  'JSON',
  'XLSX',
  'TXT',
  'XML',
  'Parquet',
  'Images (JPG/PNG)',
  'Audio (WAV/MP3)',
  'Video (MP4)',
  'ZIP (Multi-file)',
  'Other'
];

export const datasetFormats = [
  'CSV',
  'JSON',
  'XML',
  'SQL',
  'Excel',
  'Parquet',
  'API',
];
frontend\src\data\mockData.ts:
// frontend/src/data/mockData.ts

import type { User, Dataset, DatasetRequest, Proposal } from '@/types';

// Re-export the types so other files can import them from this module.
export type { User, Dataset, DatasetRequest, Proposal };


// ----- Category & Format options -----
export const categories = [
    'All Categories',
    'Financial Data',
    'Healthcare',
    'E-commerce',
    'Social Media',
    'IoT & Sensors',
    'Transportation',
    'Education',
    'Government',
    'Weather & Climate',
    'Sports',
    'Entertainment'
];

export const formats = ['CSV', 'JSON', 'XML', 'SQL', 'Excel', 'Parquet', 'API'];

// ----- Mock Data -----
// Note: In a real app, this data would come from your backend APIs.

export const mockDatasets: Dataset[] = [
    {
        id: 'ds_001', // <-- FIX: Added this line
        _id: 'ds_001',
        title: 'E-commerce Customer Behavior Dataset',
        description: 'Comprehensive dataset containing customer purchase patterns, browsing behavior, and demographic information from a major e-commerce platform. Includes 500K+ records with detailed transaction history.',
        price: 299,
        category: 'E-commerce',
        tags: ['customer-behavior', 'purchases', 'analytics', 'retail'],
        format: 'CSV',
        seller: {
            id: 'seller_001',
            _id: 'seller_001',
            name: 'DataPro Analytics',
            email: 'datapro@example.com',
            role: 'seller',
            avatarUrl: 'https://api.dicebear.com/7.x/avataaars/svg?seed=DataPro',
            rating: 4.9,
            totalDatasets: 15
        },
        dataType: 'training',
        createdAt: '2024-01-15T10:00:00Z',
        updatedAt: '2024-01-15T10:00:00Z',
        license: 'commercial',
        isAvailable: true,
        file: { filename: 'ecom.csv', mimetype: 'text/csv', path: '', size: 45000000 },
        downloads: 234,
    },
];

export const mockDatasetRequests: DatasetRequest[] = [
    {
        id: 'req_001', // <-- FIX: Added this line
        _id: 'req_001',
        title: 'Need Cryptocurrency Trading Data (2024)',
        description: 'Looking for comprehensive cryptocurrency trading data including Bitcoin, Ethereum, and top 50 altcoins. Need minute-by-minute data with volume, orderbook depth, and funding rates.',
        budget: { min: 500, max: 1000 },
        category: 'Financial Data',
        tags: ['cryptocurrency', 'bitcoin', 'ethereum', 'trading', 'real-time'],
        deadline: '2024-02-15',
        status: 'open',
        buyer: {
            id: 'buyer_001',
            _id: 'buyer_001',
            name: 'CryptoAnalyst Pro',
            email: 'crypto@example.com',
            role: 'buyer',
            avatarUrl: 'https://api.dicebear.com/7.x/avataaars/svg?seed=CryptoAnalyst',
            rating: 4.8
        },
        proposals: [],
        createdAt: '2024-01-25T08:00:00Z',
    },
];

export const mockProposals: Proposal[] = [
    {
        id: 'prop_001', // <-- FIX: Added this line
        _id: 'prop_001',
        request: 'req_001',
        seller: {
            id: 'seller_001',
            _id: 'seller_001',
            name: 'DataPro Analytics',
            email: 'datapro@example.com',
            role: 'seller',
            avatarUrl: 'https://api.dicebear.com/7.x/avataaars/svg?seed=DataPro',
        },
        coverLetter: 'I can provide high-quality crypto data with full historical depth.',
        price: 850,
        deliveryTime: 7,
        status: 'pending',
        createdAt: '2024-01-26T09:00:00Z',
    },
];

frontend\src\hooks\use-mobile.tsx:
import * as React from "react";

const MOBILE_BREAKPOINT = 768;

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean>(() =>
    typeof window !== "undefined" ? window.innerWidth < MOBILE_BREAKPOINT : false
  );

  React.useEffect(() => {
    const mediaQuery = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`);
    const handleChange = () => setIsMobile(mediaQuery.matches);

    // Listen for changes
    mediaQuery.addEventListener("change", handleChange);
    // Set initial value
    setIsMobile(mediaQuery.matches);

    // Cleanup
    return () => mediaQuery.removeEventListener("change", handleChange);
  }, []);

  return isMobile;
}

frontend\src\hooks\use-toast.ts:
import * as React from "react"
import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 5000 // 5 seconds for production UX

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) return

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }
    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }
    case "DISMISS_TOAST": {
      const { toastId } = action
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => addToRemoveQueue(toast.id))
      }
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? { ...t, open: false }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return { ...state, toasts: [] }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => listener(memoryState))
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
    // eslint-disable-next-line
  }, []) // Only subscribe on mount/unmount

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }

frontend\src\lib\utils.ts:
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

frontend\src\pages\Auth.tsx:
import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Link, useNavigate, useSearchParams } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { useAuth, AuthUser } from '@/contexts/AuthContext';
import { UserRole } from '@/types';
import { useToast } from '@/hooks/use-toast';
import {
  Eye,
  EyeOff,
  Loader2,
  CheckCircle,
  ShoppingCart,
  Upload
} from 'lucide-react';

// Define the specific role type for this component
type AuthUserRole = 'buyer' | 'seller';

const Auth: React.FC = () => {
  const [searchParams] = useSearchParams();
  const initialMode = searchParams.get('mode') === 'register' ? 'register' : 'login';
  const initialRole = (searchParams.get('role') === 'seller' ? 'seller' : 'buyer') as AuthUserRole;

  const [mode, setMode] = useState<'login' | 'register'>(initialMode);
  const [selectedRole, setSelectedRole] = useState<AuthUserRole>(initialRole);
  const [showPassword, setShowPassword] = useState(false);
  const [formData, setFormData] = useState({
    email: '',
    password: '',
    name: '',
    confirmPassword: '',
    otp: '',
  });
  const [isOTPMode, setIsOTPMode] = useState(false);

  const { login, register, isLoading, user: authUser } = useAuth();
  const { toast } = useToast();
  const navigate = useNavigate();

  const [backendError, setBackendError] = useState<string | null>(null);

  const handleLoginSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setBackendError(null);

    const result = await login(formData.email, formData.password);

    if (result.success) {
      setIsOTPMode(true);
      toast({
        title: "OTP Sent",
        description: "A one-time password has been sent to your email.",
      });
    } else {
      let errorMsg = result?.error || "Invalid credentials. Please try again.";
      setBackendError(errorMsg);
      toast({
        title: "Error",
        description: errorMsg,
        variant: "destructive"
      });
    }
  };

  const handleOTPVerify = async (e: React.FormEvent) => {
    e.preventDefault();
    setBackendError(null);

    const res = await fetch('http://localhost:5000/api/auth/verify-otp', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email: formData.email, otp: formData.otp }),
    });

    const data = await res.json();

    if (res.ok) {
      localStorage.setItem('token', data.token);
      localStorage.setItem('user', JSON.stringify(data.user));
      window.location.href = authUser?.role === 'buyer' ? '/buyer-dashboard' : '/seller-dashboard';
      toast({
        title: "Success!",
        description: "Logged in successfully.",
      });
    } else {
      let errorMsg = data?.error || "Invalid or expired OTP.";
      setBackendError(errorMsg);
      toast({
        title: "Error",
        description: errorMsg,
        variant: "destructive"
      });
    }
  };

  const handleRegisterSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setBackendError(null);

    if (formData.password !== formData.confirmPassword) {
      toast({ title: "Error", description: "Passwords do not match", variant: "destructive" });
      return;
    }
    if (formData.password.length < 6) {
      toast({ title: "Error", description: "Password must be at least 6 characters", variant: "destructive" });
      return;
    }

    // Cast selectedRole to the expected type for the register function
    const result = await register(formData.email, formData.password, formData.name, selectedRole as "buyer" | "seller");

    if (result.success) {
      toast({ title: "Success!", description: "Account created successfully" });
      const dashboardPath = selectedRole === 'buyer' ? '/buyer-dashboard' : '/seller-dashboard';
      navigate(dashboardPath);
    } else {
      let errorMsg = result?.error || "Registration failed.";
      setBackendError(errorMsg);
      toast({ title: "Error", description: errorMsg, variant: "destructive" });
    }
  };

  const roleOptions = [
    {
      value: 'buyer' as AuthUserRole,
      label: 'Data Buyer',
      description: 'Purchase datasets for your projects',
      icon: <ShoppingCart className="h-5 w-5" />, // Fixed: was w-10, should be w-5
      features: ['Browse premium datasets', 'Instant downloads', 'Post data requests']
    },
    {
      value: 'seller' as AuthUserRole,
      label: 'Data Provider',
      description: 'Monetize your data assets',
      icon: <Upload className="h-5 w-5" />,
      features: ['Upload datasets', 'Earn revenue', 'Global marketplace']
    }
  ];

  return (
    <div className="min-h-screen flex items-center justify-center bg-background py-12 px-4">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6 }}
        className="w-full max-w-md"
      >
        <div className="text-center mb-8">
          <Link to="/" className="inline-flex items-center space-x-2 mb-6">
            <img
              src="/DataNestX_Logo.png"
              alt="DataNestX Logo"
              className="h-40 mx-auto object-contain"
            />
          </Link>

          <h1 className="text-2xl font-bold text-foreground">
            {isOTPMode ? 'Verify Your Login' : (mode === 'login' ? 'Welcome Back' : 'Join DataNestX')}
          </h1>
          <p className="text-muted-foreground">
            {isOTPMode ? 'Enter the OTP sent to your email to continue.' : (mode === 'login' ? 'Sign in to your account to continue' : 'Create your account to get started')}
          </p>
        </div>

        <Card className="border-0 shadow-lg">
          <CardHeader className="space-y-1 pb-4">
            {!isOTPMode && (
              <Tabs value={mode} onValueChange={(value) => {
                setMode(value as 'login' | 'register');
                setIsOTPMode(false);
              }}>
                <TabsList className="grid w-full grid-cols-2">
                  <TabsTrigger value="login">Sign In</TabsTrigger>
                  <TabsTrigger value="register">Sign Up</TabsTrigger>
                </TabsList>
              </Tabs>
            )}
          </CardHeader>

          <CardContent className="space-y-6">
            {!isOTPMode && (
              <div className="space-y-3">
                <Label className="text-sm font-medium">I want to:</Label>
                <div className="grid grid-cols-1 gap-3">
                  {roleOptions.map((role) => (
                    <motion.div
                      key={role.value}
                      whileHover={{ scale: 1.02 }}
                      whileTap={{ scale: 0.98 }}
                    >
                      <Card
                        className={`cursor-pointer border-2 transition-all duration-200 ${
                          selectedRole === role.value
                            ? 'border-primary bg-primary/5'
                            : 'border-border hover:border-primary/50'
                        }`}
                        onClick={() => setSelectedRole(role.value)}
                      >
                        <CardContent className="p-4">
                          <div className="flex items-center space-x-3">
                            <div className={`p-2 rounded-lg ${
                              selectedRole === role.value
                                ? 'bg-primary text-primary-foreground'
                                : 'bg-muted text-muted-foreground'
                            }`}>
                              {role.icon}
                            </div>
                            <div className="flex-1">
                              <div className="flex items-center space-x-2">
                                <h3 className="font-medium text-foreground">{role.label}</h3>
                                {selectedRole === role.value && (
                                  <CheckCircle className="h-4 w-4 text-primary" />
                                )}
                              </div>
                              <p className="text-sm text-muted-foreground">{role.description}</p>
                            </div>
                          </div>
                        </CardContent>
                      </Card>
                    </motion.div>
                  ))}
                </div>
              </div>
            )}

            {isOTPMode ? (
              <form onSubmit={handleOTPVerify} className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="otp">One-Time Password</Label>
                  <Input
                    id="otp"
                    type="text"
                    placeholder="Enter the 6-digit OTP"
                    value={formData.otp}
                    onChange={(e) => setFormData({ ...formData, otp: e.target.value })}
                    required
                    maxLength={6}
                  />
                </div>
                {backendError && (
                  <div className="text-xs text-red-600 px-1">
                    {backendError}
                  </div>
                )}
                <Button type="submit" className="w-full" disabled={isLoading}>
                  {isLoading ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      Verifying...
                    </>
                  ) : (
                    'Verify OTP'
                  )}
                </Button>
              </form>
            ) : (
              <form onSubmit={mode === 'login' ? handleLoginSubmit : handleRegisterSubmit} className="space-y-4">
                <AnimatePresence mode="wait">
                  {mode === 'register' && (
                    <motion.div
                      initial={{ opacity: 0, height: 0 }}
                      animate={{ opacity: 1, height: 'auto' }}
                      exit={{ opacity: 0, height: 0 }}
                      transition={{ duration: 0.3 }}
                    >
                      <div className="space-y-2">
                        <Label htmlFor="name">Full Name</Label>
                        <Input
                          id="name"
                          type="text"
                          placeholder="Enter your full name"
                          value={formData.name}
                          onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                          required
                        />
                      </div>
                    </motion.div>
                  )}
                </AnimatePresence>

                <div className="space-y-2">
                  <Label htmlFor="email">Email</Label>
                  <Input
                    id="email"
                    type="email"
                    placeholder="Enter your email"
                    value={formData.email}
                    onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                    required
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="password">Password</Label>
                  <div className="relative">
                    <Input
                      id="password"
                      type={showPassword ? 'text' : 'password'}
                      placeholder="Enter your password"
                      value={formData.password}
                      onChange={(e) => setFormData({ ...formData, password: e.target.value })}
                      required
                    />
                    <Button
                      type="button"
                      variant="ghost"
                      size="sm"
                      className="absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent"
                      onClick={() => setShowPassword(!showPassword)}
                    >
                      {showPassword ? (
                        <EyeOff className="h-4 w-4 text-muted-foreground" />
                      ) : (
                        <Eye className="h-4 w-4 text-muted-foreground" />
                      )}
                    </Button>
                  </div>
                </div>

                <AnimatePresence mode="wait">
                  {mode === 'register' && (
                    <motion.div
                      initial={{ opacity: 0, height: 0 }}
                      animate={{ opacity: 1, height: 'auto' }}
                      exit={{ opacity: 0, height: 0 }}
                      transition={{ duration: 0.3 }}
                    >
                      <div className="space-y-2">
                        <Label htmlFor="confirmPassword">Confirm Password</Label>
                        <Input
                          id="confirmPassword"
                          type="password"
                          placeholder="Confirm your password"
                          value={formData.confirmPassword}
                          onChange={(e) => setFormData({ ...formData, confirmPassword: e.target.value })}
                          required
                        />
                      </div>
                    </motion.div>
                  )}
                </AnimatePresence>

                {backendError && (
                  <div className="text-xs text-red-600 px-1">
                    {backendError}
                  </div>
                )}

                <Button type="submit" className="w-full" disabled={isLoading}>
                  {isLoading ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      {mode === 'login' ? 'Signing In...' : 'Creating Account...'}
                    </>
                  ) : (
                    mode === 'login' ? 'Sign In' : 'Create Account'
                  )}
                </Button>
              </form>
            )}

            <div className="text-center text-sm text-muted-foreground">
              {mode === 'login' ? "Don't have an account? " : "Already have an account? "}
              <Button
                variant="link"
                className="p-0 h-auto font-normal"
                onClick={() => {
                  setMode(mode === 'login' ? 'register' : 'login');
                  setIsOTPMode(false);
                }}
              >
                {mode === 'login' ? 'Sign up' : 'Sign in'}
              </Button>
            </div>
          </CardContent>
        </Card>

        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.5 }}
          className="mt-6"
        >
          <Card className="border-primary/20 bg-primary/5">
            <CardContent className="p-4">
              <div className="flex items-start space-x-3">
                <div className="flex items-center justify-center w-6 h-6 bg-primary/20 text-primary rounded-full mt-0.5">
                  <CheckCircle className="h-4 w-4" />
                </div>
                <div>
                  <h4 className="text-sm font-medium text-foreground mb-1">Demo Mode</h4>
                  <p className="text-xs text-muted-foreground">
                    This is a demo. Use any email and password to {mode === 'login' ? 'sign in' : 'create an account'}.
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>
        </motion.div>
      </motion.div>
    </div>
  );
};

export default Auth;
frontend\src\pages\BuyerDashboard.tsx:
// frontend/src/pages/BuyerDashboard.tsx
import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { useAuth } from '@/contexts/AuthContext';
import axios from 'axios';
import { saveAs } from 'file-saver';
import { ShoppingCart, FileText, Download, DollarSign, Plus, Loader2 } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { Purchase, DatasetRequest } from '@/types';
import { RequestCard } from '@/components/RequestCard';
import { Badge } from '@/components/ui/badge';

const API_URL = 'http://localhost:5000/api';

export const BuyerDashboard: React.FC = () => {
    const { user } = useAuth();
    const { toast } = useToast();
    const [activeTab, setActiveTab] = useState('overview');
    const [purchases, setPurchases] = useState<Purchase[]>([]);
    const [myRequests, setMyRequests] = useState<DatasetRequest[]>([]);
    const [loading, setLoading] = useState(true);

    const handleDownload = async (datasetId: string, filename: string) => {
        try {
            const token = localStorage.getItem('token');
            if (!token) {
                toast({ title: 'Authentication Required', variant: 'destructive' });
                return;
            }
            toast({ title: 'Downloading...', description: `Preparing ${filename} for download.` });
            const response = await axios.get(`${API_URL}/datasets/download/${datasetId}`, {
                headers: { Authorization: `Bearer ${token}` },
                responseType: 'blob',
            });
            saveAs(response.data, filename);
            toast({ title: 'Download Successful', description: `${filename} has been downloaded.` });
        } catch (err: any) {
            const errorMessage = err?.response?.data?.error || 'Download failed';
            toast({ title: 'Download Failed', description: errorMessage, variant: 'destructive' });
        }
    };

    useEffect(() => {
        const fetchData = async () => {
            setLoading(true);
            const token = localStorage.getItem('token');
            if (!token || !user) {
                setLoading(false);
                return;
            }

            try {
                const [purchasesRes, myRequestsRes] = await Promise.all([
                    axios.get(`${API_URL}/purchases/me`, { headers: { Authorization: `Bearer ${token}` } }),
                    axios.get(`${API_URL}/requests/my`, { headers: { Authorization: `Bearer ${token}` } })
                ]);

                if (purchasesRes.data) setPurchases(purchasesRes.data);
                if (myRequestsRes.data) setMyRequests(myRequestsRes.data);

            } catch (error) {
                toast({ title: "Network Error", description: "Could not fetch dashboard data.", variant: "destructive" });
            } finally {
                setLoading(false);
            }
        };

        fetchData();
    }, [user, toast]);
    
    const stats = [
        { title: "Datasets Purchased", value: purchases.length, icon: <ShoppingCart /> },
        { title: "Active Requests", value: myRequests.filter(r => r.status === 'open').length, icon: <FileText /> },
        { title: "Total Spent", value: `$${(purchases.reduce((sum, p) => sum + p.amount, 0) / 100).toFixed(2)}`, icon: <DollarSign /> },
    ];

    if (loading) {
        return <div className="flex items-center justify-center h-screen"><Loader2 className="h-8 w-8 animate-spin" /></div>;
    }

    return (
        <div className="min-h-screen bg-background py-8">
            <div className="container px-4 mx-auto">
                <motion.div initial={{ opacity: 0, y: -20 }} animate={{ opacity: 1, y: 0 }} className="mb-8">
                    <h1 className="text-3xl font-bold">Welcome back, {user?.name}!</h1>
                </motion.div>
                
                <Tabs value={activeTab} onValueChange={setActiveTab}>
                    <TabsList className="grid w-full grid-cols-3 mb-8">
                        <TabsTrigger value="overview">Overview</TabsTrigger>
                        <TabsTrigger value="purchased">My Datasets ({purchases.length})</TabsTrigger>
                        <TabsTrigger value="requests">My Requests ({myRequests.length})</TabsTrigger>
                    </TabsList>

                    {/* --- THIS IS THE FIX --- */}
                    {/* This JSX now correctly renders the content for the Overview tab. */}
                    <TabsContent value="overview">
                        <div className="space-y-8">
                            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                                {stats.map((stat, index) => (
                                    <Card key={index}>
                                        <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                                            <CardTitle className="text-sm font-medium">{stat.title}</CardTitle>
                                            <div className="text-muted-foreground">{stat.icon}</div>
                                        </CardHeader>
                                        <CardContent>
                                            <div className="text-2xl font-bold">{stat.value}</div>
                                        </CardContent>
                                    </Card>
                                ))}
                            </div>
                            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                                <Card>
                                    <CardHeader>
                                        <CardTitle>Recent Purchases</CardTitle>
                                    </CardHeader>
                                    <CardContent>
                                        {purchases.length > 0 ? (
                                            <ul className="space-y-2">
                                                {purchases.slice(0, 5).map(p => (
                                                    <li key={p._id} className="flex justify-between items-center">
                                                        <span>{p.dataset.title}</span>
                                                        <span className="font-mono text-sm">${(p.amount / 100).toFixed(2)}</span>
                                                    </li>
                                                ))}
                                            </ul>
                                        ) : <p className="text-muted-foreground">No purchases yet.</p>}
                                    </CardContent>
                                </Card>
                                <Card>
                                    <CardHeader>
                                        <CardTitle>Recent Requests</CardTitle>
                                    </CardHeader>
                                    <CardContent>
                                        {myRequests.length > 0 ? (
                                            <ul className="space-y-2">
                                                {myRequests.slice(0, 5).map(r => (
                                                    <li key={r._id} className="flex justify-between items-center">
                                                        <span>{r.title}</span>
                                                        <Badge variant={r.status === 'open' ? 'default' : 'secondary'} className="capitalize">{r.status}</Badge>
                                                    </li>
                                                ))}
                                            </ul>
                                        ) : <p className="text-muted-foreground">No requests posted yet.</p>}
                                    </CardContent>
                                </Card>
                            </div>
                        </div>
                    </TabsContent>

                    <TabsContent value="purchased">
                        {/* Purchased datasets content can be added here */}
                    </TabsContent>

                    <TabsContent value="requests">
                        <div className="flex items-center justify-between mb-6">
                            <h2 className="text-xl font-semibold">Your Posted Requests</h2>
                            <Button onClick={() => window.location.href = '/post-request'}>
                                <Plus className="h-4 w-4 mr-2" />
                                Post New Request
                            </Button>
                        </div>
                        {myRequests.length === 0 ? (
                            <div className="text-center py-16">
                                <FileText className="h-16 w-16 text-muted-foreground mx-auto mb-4" />
                                <h3 className="text-lg font-medium">You haven't posted any requests yet.</h3>
                            </div>
                        ) : (
                            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
                                {myRequests.map((request) => (
                                    <RequestCard key={request._id} request={request} />
                                ))}
                            </div>
                        )}
                    </TabsContent>
                </Tabs>
            </div>
        </div>
    );
};

frontend\src\pages\BuyerRequests.tsx:
import React, { useEffect, useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { useAuth, AuthUser } from '@/contexts/AuthContext'; // Import AuthUser
import { useToast } from '@/hooks/use-toast';
import { Trash } from 'lucide-react';
import { DatasetRequest } from '@/data/mockData'; // Correct import path for DatasetRequest

const BuyerRequests: React.FC = () => {
  const { user } = useAuth(); // user is of type AuthUser | null
  const { toast } = useToast();
  const [requests, setRequests] = useState<DatasetRequest[]>([]);
  const [loading, setLoading] = useState(true);

  const fetchRequests = async () => {
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        setLoading(false);
        toast({ title: 'Authentication Required', description: 'Please log in to view your requests.', variant: 'destructive' });
        return;
      }

      const res = await fetch(`http://localhost:5000/api/requests`, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });

      if (!res.ok) {
        const errorData = await res.json();
        throw new Error(errorData.error || 'Failed to fetch requests');
      }

      const data: DatasetRequest[] = await res.json();
      // Filter requests for this buyer only on the frontend.
      // Ideally, backend would provide an endpoint to fetch only current user's requests.
      setRequests(data.filter((r: DatasetRequest) => {
        const buyerId = typeof r.buyer === 'object' && r.buyer !== null ? r.buyer.id : r.buyer;
        return buyerId === user?.id; // Safely compare with current user's ID
      }));
    } catch (err: any) {
      console.error('Error fetching requests:', err);
      toast({
        title: 'Error loading requests',
        description: err.message || 'Try again later.',
        variant: 'destructive',
      });
    } finally {
      setLoading(false);
    }
  };

  const deleteRequest = async (id: string) => {
    const token = localStorage.getItem('token');
    if (!token) {
      toast({ title: 'Authentication Required', description: 'Please log in to delete requests.', variant: 'destructive' });
      return;
    }

    try {
      const res = await fetch(`http://localhost:5000/api/requests/${id}`, {
        method: 'DELETE',
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });

      if (!res.ok) {
        const errorData = await res.json();
        throw new Error(errorData.error || 'Failed to delete request');
      }

      setRequests((prev) => prev.filter((r) => (r.id ?? r._id) !== id)); // Use r.id or r._id
      toast({ title: 'Request Deleted', description: 'Your request has been successfully deleted.' });
    } catch (err: any) {
      console.error('Error deleting request:', err);
      toast({
        title: 'Failed to delete request',
        description: err.message || 'Something went wrong.',
        variant: 'destructive',
      });
    }
  };

  useEffect(() => {
    if (user && user.role === 'buyer') {
      fetchRequests();
    } else {
      setLoading(false);
    }
  }, [user]); // Depend on user, toast is already a stable reference

  if (loading) return <div className="text-center mt-10">Loading your requests...</div>;

  if (!user || user.role !== 'buyer') {
    return <div className="text-center text-muted-foreground my-10">Only buyers can view their requests. Please log in as a buyer.</div>;
  }

  return (
    <div className="container max-w-5xl mx-auto py-10 px-4">
      <h1 className="text-2xl font-bold mb-6">My Dataset Requests</h1>

      {requests.length === 0 ? (
        <p className="text-muted-foreground">You havenât posted any dataset requests yet.</p>
      ) : (
        <div className="grid gap-6">
          {requests.map((req) => (
            <Card key={req.id ?? req._id}> {/* Use req.id or req._id for key */}
              <CardHeader>
                <div className="flex justify-between items-center">
                  <div>
                    <CardTitle className="text-xl">{req.title}</CardTitle>
                    <p className="text-sm text-muted-foreground">{req.category}</p>
                  </div>
                  <Button variant="destructive" size="sm" onClick={() => deleteRequest(req.id ?? req._id!)}>
                    <Trash className="h-4 w-4" />
                  </Button>
                </div>
              </CardHeader>
              <CardContent className="space-y-2">
                <p className="text-muted-foreground">{req.description}</p>
                <div className="text-sm">
                  <strong>Deadline:</strong> {req.deadline ? new Date(req.deadline).toLocaleDateString() : 'N/A'}
                </div>
                <div className="text-sm">
                  <strong>Budget:</strong> ${req.budget.min} â ${req.budget.max}
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      )}
    </div>
  );
};

export default BuyerRequests;

frontend\src\pages\Checkout.tsx:
// frontend/src/pages/Checkout.tsx
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { loadStripe } from '@stripe/stripe-js';
import {
  Elements,
  PaymentElement,
  useStripe,
  useElements
} from '@stripe/react-stripe-js';
import { useAuth } from '@/contexts/AuthContext';
import { useToast } from '@/hooks/use-toast';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Loader2, CheckCircle } from 'lucide-react';
import { Dataset } from '@/data/mockData'; // Import Dataset type
import { StripeElementsOptions } from '@stripe/stripe-js'; // Import StripeElementsOptions

// Make sure to call `loadStripe` outside of a componentâs render to avoid
// recreating the Stripe object on every render.
// Use your publishable key from the .env file
const stripePromise = loadStripe(import.meta.env.VITE_STRIPE_PUBLISHABLE_KEY || 'pk_test_YOUR_FALLBACK_PUBLISHABLE_KEY');

const CheckoutForm: React.FC<{ dataset: Dataset }> = ({ dataset }) => {
  const stripe = useStripe();
  const elements = useElements();
  const { user } = useAuth();
  const { toast } = useToast();
  const navigate = useNavigate();

  const [message, setMessage] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);

  const handleSubmit = async (event: React.FormEvent) => {
    event.preventDefault();

    if (!stripe || !elements || !user) {
      // Stripe.js has not yet loaded.
      // Make sure to disable form submission until Stripe.js has loaded.
      return;
    }

    setIsLoading(true);

    // Confirm the PaymentIntent on the client side
    const { error } = await stripe.confirmPayment({
      elements,
      confirmParams: {
        // Return URL where the user will be redirected after payment confirmation
        return_url: `${window.location.origin}/checkout-success`, // We'll create this page
      },
    });

    // This point will only be reached if there is an immediate error when
    // confirming the payment. Otherwise, your customer will be redirected to
    // your `return_url`.
    if (error.type === "card_error" || error.type === "validation_error") {
      setMessage(error.message || "An unexpected error occurred.");
      toast({
        title: "Payment Error",
        description: error.message || "Please check your card details.",
        variant: "destructive"
      });
    } else {
      setMessage("An unexpected error occurred.");
      toast({
        title: "Payment Error",
        description: "An unexpected error occurred.",
        variant: "destructive"
      });
    }

    setIsLoading(false);
  };

  return (
    <form id="payment-form" onSubmit={handleSubmit} className="space-y-6">
      <PaymentElement id="payment-element" />
      <Button disabled={isLoading || !stripe || !elements} id="submit" className="w-full">
        {isLoading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <CheckCircle className="mr-2 h-4 w-4" />}
        <span>{isLoading ? "Processing..." : `Pay $${dataset.price}`}</span>
      </Button>
      {/* Show any error or success messages */}
      {message && <div id="payment-message" className="text-destructive text-sm mt-4">{message}</div>}
    </form>
  );
};

const CheckoutPage: React.FC = () => {
  const { datasetId } = useParams<{ datasetId: string }>();
  const { user } = useAuth();
  const { toast } = useToast();
  const navigate = useNavigate();

  const [clientSecret, setClientSecret] = useState<string | null>(null);
  const [dataset, setDataset] = useState<Dataset | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchPaymentIntent = async () => {
      if (!user || !datasetId) {
        setLoading(false);
        setError("Authentication required or invalid dataset ID.");
        toast({ title: "Error", description: "Please log in or provide a valid dataset ID.", variant: "destructive" });
        return;
      }

      const token = localStorage.getItem('token');
      if (!token) {
        setLoading(false);
        setError("Authentication token missing.");
        toast({ title: "Error", description: "Please log in to proceed.", variant: "destructive" });
        return;
      }

      try {
        // Fetch dataset details first
        const datasetRes = await fetch(`http://localhost:5000/api/datasets/${datasetId}`, { // Assuming you have a GET /api/datasets/:id endpoint
            headers: { Authorization: `Bearer ${token}` }
        });
        if (!datasetRes.ok) {
            const errorData = await datasetRes.json();
            throw new Error(errorData.error || "Failed to fetch dataset details.");
        }
        const datasetData: Dataset = await datasetRes.json();
        setDataset(datasetData);

        // Then create payment intent
        const res = await fetch('http://localhost:5000/api/payments/create-payment-intent', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`,
          },
          body: JSON.stringify({ datasetId }),
        });

        const data = await res.json();

        if (!res.ok) {
          throw new Error(data.error || 'Failed to create payment intent.');
        }

        setClientSecret(data.clientSecret);
      } catch (err: any) {
        console.error('Error fetching payment intent:', err);
        setError(err.message || 'Failed to initialize payment.');
        toast({ title: "Error", description: err.message || "Failed to initialize payment.", variant: "destructive" });
      } finally {
        setLoading(false);
      }
    };

    fetchPaymentIntent();
  }, [datasetId, user, toast, navigate]);

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-background">
        <Loader2 className="h-16 w-16 animate-spin text-primary" />
        <p className="ml-4 text-muted-foreground">Loading payment...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-background">
        <Card className="max-w-md w-full text-center p-8">
          <CardTitle className="mb-4">Payment Error</CardTitle>
          <CardContent>
            <p className="text-destructive mb-4">{error}</p>
            <Button onClick={() => navigate('/marketplace')}>Back to Marketplace</Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  if (!clientSecret || !dataset) {
    return (
        <div className="min-h-screen flex items-center justify-center bg-background">
            <Card className="max-w-md w-full text-center p-8">
                <CardTitle className="mb-4">Payment Unavailable</CardTitle>
                <CardContent>
                    <p className="text-muted-foreground mb-4">Could not load payment details. Please try again later.</p>
                    <Button onClick={() => navigate('/marketplace')}>Back to Marketplace</Button>
                </CardContent>
            </Card>
        </div>
    );
  }

  // Corrected StripeElementsOptions structure
  const options: StripeElementsOptions = {
    clientSecret, // clientSecret is a top-level property
    appearance: {
      theme: 'stripe',
      variables: {
          colorPrimary: '#198077', // Your primary color (DataNestX teal)
          colorBackground: '#F8FAFC', // Your background color (bg-background)
          colorText: '#198077', // Your foreground color
          colorDanger: '#EF4444', // Tailwind red-500
          fontFamily: 'Inter, sans-serif', // Your font-body
      },
      rules: {
          '.Input': {
              borderRadius: '0.75rem', // Tailwind rounded-xl (from --radius)
              borderColor: '#CBD5E1', // Tailwind gray-300 (similar to --border)
          },
          '.Label': {
              color: '#4B5563', // Tailwind gray-600
          },
          '.Tab': {
              borderRadius: '0.75rem',
          },
          '.Tab--selected': {
              backgroundColor: '#198077',
              color: '#FFFFFF',
          },
          '.Tab--selected:hover': {
              backgroundColor: '#146358', // primary-hover
          },
      }
    }
  };

  return (
    <div className="min-h-screen bg-background py-8 flex items-center justify-center">
      <Card className="max-w-xl w-full shadow-lg">
        <CardHeader>
          <CardTitle className="text-2xl text-primary">Complete Your Purchase</CardTitle>
          <p className="text-muted-foreground">
            Purchasing: <span className="font-semibold">{dataset.title}</span> for <span className="font-bold">${dataset.price}</span>
          </p>
        </CardHeader>
        <CardContent>
          {clientSecret && (
            <Elements options={options} stripe={stripePromise}>
              <CheckoutForm dataset={dataset} />
            </Elements>
          )}
        </CardContent>
      </Card>
    </div>
  );
};

export default CheckoutPage;

frontend\src\pages\CheckoutSuccess.tsx:
// frontend/src/pages/CheckoutSuccess.tsx
import React, { useEffect, useState } from 'react';
import { useSearchParams, useNavigate, Link } from 'react-router-dom';
import { CheckCircle, XCircle, Loader2 } from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { useToast } from '@/hooks/use-toast';

const CheckoutSuccessPage: React.FC = () => {
  const [searchParams] = useSearchParams();
  const navigate = useNavigate();
  const { toast } = useToast();

  const [status, setStatus] = useState<'loading' | 'success' | 'failure'>('loading');
  const [message, setMessage] = useState<string | null>(null);

  useEffect(() => {
    const paymentIntentClientSecret = searchParams.get('payment_intent_client_secret');
    const redirectStatus = searchParams.get('redirect_status'); // 'succeeded', 'failed', 'canceled'

    if (!paymentIntentClientSecret || !redirectStatus) {
      setStatus('failure');
      setMessage('Payment information missing. Please try again.');
      toast({ title: "Error", description: "Payment information incomplete.", variant: "destructive" });
      return;
    }

    if (redirectStatus === 'succeeded') {
      setStatus('success');
      setMessage('Payment successful! Your dataset is now available for download.');
      toast({ title: "Success", description: "Payment completed successfully!", duration: 5000 });
      // TODO: In a real app, you'd make a backend call here to confirm the payment
      // and grant access to the dataset if not already done via webhooks.
    } else if (redirectStatus === 'failed' || redirectStatus === 'canceled') {
      setStatus('failure');
      setMessage('Payment failed or was cancelled. Please try again.');
      toast({ title: "Payment Failed", description: "Your payment could not be processed.", variant: "destructive" });
    } else {
      setStatus('failure');
      setMessage('An unknown payment status occurred.');
      toast({ title: "Unknown Status", description: "An unknown payment status occurred.", variant: "destructive" });
    }
  }, [searchParams, toast]);

  return (
    <div className="min-h-screen bg-background-secondary flex items-center justify-center p-4">
      <Card className="max-w-md w-full text-center shadow-lg">
        <CardHeader>
          {status === 'loading' && (
            <Loader2 className="h-16 w-16 animate-spin text-primary mx-auto mb-4" />
          )}
          {status === 'success' && (
            <CheckCircle className="h-16 w-16 text-success mx-auto mb-4" />
          )}
          {status === 'failure' && (
            <XCircle className="h-16 w-16 text-destructive mx-auto mb-4" />
          )}
          <CardTitle className={`text-2xl ${
            status === 'success' ? 'text-success' :
            status === 'failure' ? 'text-destructive' : 'text-primary'
          }`}>
            {status === 'loading' && "Processing Payment..."}
            {status === 'success' && "Payment Confirmed!"}
            {status === 'failure' && "Payment Failed"}
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          <p className="text-muted-foreground">{message}</p>
          <div className="flex flex-col gap-3">
            {status === 'success' && (
              <Button onClick={() => navigate('/buyer-dashboard')} className="gradient-primary">
                Go to My Datasets
              </Button>
            )}
            {status === 'failure' && (
              <Button onClick={() => navigate(-1)} variant="outline">
                Try Again
              </Button>
            )}
            <Button onClick={() => navigate('/marketplace')} variant="ghost">
              Back to Marketplace
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default CheckoutSuccessPage;

frontend\src\pages\Contact.tsx:
import React from "react";
const Contact = () => (
  <div className="p-8 text-center text-xl">Contact Us page coming soon!</div>
);
export default Contact;

frontend\src\pages\Help.tsx:
import React from "react";
const Help = () => (
  <div className="p-8 text-center text-xl">Help Center coming soon!</div>
);
export default Help;

frontend\src\pages\Index.tsx:
// Update this page (the content is just a fallback if you fail to update the page)

const Index = () => {
  return (
    <div className="min-h-screen flex items-center justify-center bg-background">
      <div className="text-center">
        <h1 className="text-4xl font-bold mb-4">Welcome to Your Blank App</h1>
        <p className="text-xl text-muted-foreground">Start building your amazing project here!</p>
      </div>
    </div>
  );
};

export default Index;

frontend\src\pages\Landing.tsx:
import React from 'react';
import { motion } from 'framer-motion';
import { Link } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import {
  Database,
  Users,
  Star,
  DollarSign,
  Search,
  Upload,
  Target,
  Shield,
  Zap,
  Brain,
  ArrowRight,
  CheckCircle2,
  Clock,
  Award,
  Rocket
} from 'lucide-react';

export const Landing: React.FC = () => {
  const stats = [
    { label: 'Premium Datasets', value: '15K+', icon: Database, color: 'text-accent-teal' },
    { label: 'Data Scientists', value: '3.2K+', icon: Users, color: 'text-accent-pink' },
    { label: 'Success Stories', value: '12K+', icon: Star, color: 'text-accent-orange' },
    { label: 'Revenue Generated', value: '$4.2M+', icon: DollarSign, color: 'text-accent-amber' }
  ];

  const features = [
    {
      icon: Target,
      title: 'AI-Powered Discovery',
      description: 'Smart matching algorithms find the perfect datasets for your specific use case',
      color: 'bg-accent-teal/10 text-accent-teal'
    },
    {
      icon: Shield,
      title: 'Enterprise Security',
      description: 'Bank-level encryption and compliance with GDPR, CCPA data protection',
      color: 'bg-accent-orange/10 text-accent-orange'
    },
    {
      icon: Zap,
      title: 'Lightning Fast',
      description: 'CDN-powered downloads with 99.9% uptime guarantee',
      color: 'bg-accent-amber/10 text-accent-amber'
    },
    {
      icon: Brain,
      title: 'Quality Assured',
      description: 'Every dataset verified by ML experts with detailed quality scores',
      color: 'bg-accent-pink/10 text-accent-pink'
    }
  ];

  const testimonials = [
    {
      name: 'Alex Chen',
      role: 'Lead ML Engineer at DataCorp',
      content: 'This platform saved us 3 months of data collection. The quality is exceptional and the pricing is transparent.',
      avatar: '/placeholder.svg',
      rating: 5,
      company: 'DataCorp'
    },
    {
      name: 'Sarah Martinez',
      role: 'Research Scientist',
      content: "I've monetized my research datasets here and built meaningful connections with the AI community.",
      avatar: '/placeholder.svg',
      rating: 5,
      company: 'Stanford Research'
    },
    {
      name: 'Mike Johnson',
      role: 'Startup CTO',
      content: 'The custom dataset requests feature helped us get exactly what we needed for our computer vision project.',
      avatar: '/placeholder.svg',
      rating: 5,
      company: 'VisionTech'
    }
  ];

  const benefits = [
    { icon: CheckCircle2, text: 'Instant dataset previews' },
    { icon: Clock, text: '24/7 expert support' },
    { icon: Award, text: 'Quality guarantee' },
    { icon: Brain, text: 'Full documentation' }
  ];

  return (
    <div className="min-h-screen bg-background">
      {/* Hero Section */}
      <section className="relative overflow-hidden bg-gradient-to-br from-background via-background-secondary to-background py-20 md:py-32">
        <div className="container px-4 mx-auto">
          <div className="max-w-5xl mx-auto text-center">
            <motion.div
              initial={{ opacity: 0, y: 30 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.8 }}
            >
              <h1 className="text-4xl md:text-6xl lg:text-7xl font-heading font-bold text-foreground mb-6 leading-tight">
                Find Perfect Data for{' '}
                <span className="text-gradient">Your AI Projects</span>
              </h1>
              <p className="text-xl md:text-2xl text-muted-foreground mb-8 max-w-4xl mx-auto leading-relaxed">
                Browse premium datasets from trusted data scientists. 
                Quality guaranteed, instantly accessible.
              </p>
              <div className="flex flex-col sm:flex-row gap-4 justify-center items-center mb-12">
                <Button size="lg" className="gradient-primary text-lg px-8 py-6" asChild>
                  <Link to="/auth?mode=register&role=buyer">
                    <Search className="mr-2 h-5 w-5" />
                    Browse Datasets
                    <ArrowRight className="ml-2 h-5 w-5" />
                  </Link>
                </Button>
                <Button size="lg" variant="outline" className="text-lg px-8 py-6" asChild>
                  <Link to="/auth?mode=register&role=seller">
                    <Upload className="mr-2 h-5 w-5" />
                    Start Selling
                  </Link>
                </Button>
              </div>
              {/* Benefits List */}
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-12 max-w-3xl mx-auto">
                {benefits.map((benefit, index) => (
                  <motion.div
                    key={benefit.text}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.5, delay: 0.6 + index * 0.1 }}
                    className="flex items-center space-x-2 text-sm text-muted-foreground"
                  >
                    <benefit.icon className="h-4 w-4 text-accent-teal flex-shrink-0" />
                    <span className="hidden md:block">{benefit.text}</span>
                  </motion.div>
                ))}
              </div>
            </motion.div>
            {/* Stats */}
            <motion.div
              initial={{ opacity: 0, y: 30 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.8, delay: 0.2 }}
              className="grid grid-cols-2 md:grid-cols-4 gap-8"
            >
              {stats.map((stat, index) => (
                <motion.div
                  key={stat.label}
                  initial={{ opacity: 0, scale: 0.8 }}
                  animate={{ opacity: 1, scale: 1 }}
                  transition={{
                    duration: 0.5,
                    delay: 0.3 + index * 0.1,
                    type: 'spring',
                    stiffness: 100
                  }}
                  className="text-center"
                >
                  <div className="p-4 rounded-xl bg-card border border-border shadow-soft">
                    <stat.icon className={`h-8 w-8 mx-auto mb-3 ${stat.color}`} />
                    <div className="text-2xl md:text-3xl font-bold text-foreground mb-1">
                      {stat.value}
                    </div>
                    <div className="text-sm text-muted-foreground">{stat.label}</div>
                  </div>
                </motion.div>
              ))}
            </motion.div>
          </div>
        </div>
      </section>

      {/* Features Section */}
      <section className="py-20 md:py-32 bg-background-secondary">
        <div className="container px-4 mx-auto">
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
            viewport={{ once: true }}
            className="text-center mb-16"
          >
            <h2 className="text-3xl md:text-5xl font-heading font-bold text-foreground mb-6">
              Why Choose Our Platform
            </h2>
            <p className="text-xl text-muted-foreground max-w-3xl mx-auto">
              Built for data scientists, by data scientists. 
              Experience professional data commerce with cutting-edge tools.
            </p>
          </motion.div>
          <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-8">
            {features.map((feature, index) => (
              <motion.div
                key={feature.title}
                initial={{ opacity: 0, y: 30 }}
                whileInView={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.6, delay: index * 0.1 }}
                viewport={{ once: true }}
              >
                <Card className="h-full border-0 shadow-soft hover:shadow-medium transition-all duration-300">
                  <CardContent className="p-6 text-center">
                    <div className={`inline-flex p-3 rounded-xl mb-4 ${feature.color}`}>
                      <feature.icon className="h-6 w-6" />
                    </div>
                    <h3 className="text-lg font-heading font-semibold text-foreground mb-3">
                      {feature.title}
                    </h3>
                    <p className="text-muted-foreground text-sm leading-relaxed">
                      {feature.description}
                    </p>
                  </CardContent>
                </Card>
              </motion.div>
            ))}
          </div>
        </div>
      </section>

      {/* How It Works */}
      <section className="py-20 md:py-32">
        <div className="container px-4 mx-auto">
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
            viewport={{ once: true }}
            className="text-center mb-16"
          >
            <h2 className="text-3xl md:text-5xl font-heading font-bold text-foreground mb-6">
              Get Started in Minutes
            </h2>
            <p className="text-xl text-muted-foreground max-w-3xl mx-auto">
              Whether you're buying or selling data, our streamlined process gets you results fast.
            </p>
          </motion.div>
          <div className="grid md:grid-cols-2 gap-16 max-w-6xl mx-auto">
            {/* For Buyers */}
            <motion.div
              initial={{ opacity: 0, x: -30 }}
              whileInView={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.8 }}
              viewport={{ once: true }}
            >
              <Card className="border-0 shadow-medium h-full">
                <CardContent className="p-8">
                  <div className="flex items-center mb-6">
                    <div className="p-3 bg-accent-teal/10 text-accent-teal rounded-xl mr-4">
                      <Search className="h-6 w-6" />
                    </div>
                    <h3 className="text-2xl font-heading font-bold text-foreground">
                      For Buyers
                    </h3>
                  </div>
                  <div className="space-y-4">
                    {[
                      'Browse 15,000+ verified datasets',
                      'Preview data quality and samples',
                      'Secure payment with instant access',
                      'Get expert support when needed'
                    ].map((step, index) => (
                      <div key={index} className="flex items-start space-x-3">
                        <div className="flex-shrink-0 w-6 h-6 bg-accent-teal text-white rounded-full flex items-center justify-center text-sm font-medium">
                          {index + 1}
                        </div>
                        <p className="text-muted-foreground">{step}</p>
                      </div>
                    ))}
                  </div>
                  <Button className="w-full mt-6" asChild>
                    <Link to="/marketplace">
                      Browse Datasets
                      <ArrowRight className="ml-2 h-4 w-4" />
                    </Link>
                  </Button>
                </CardContent>
              </Card>
            </motion.div>

            {/* For Sellers */}
            <motion.div
              initial={{ opacity: 0, x: 30 }}
              whileInView={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.8 }}
              viewport={{ once: true }}
            >
              <Card className="border-0 shadow-medium h-full">
                <CardContent className="p-8">
                  <div className="flex items-center mb-6">
                    <div className="p-3 bg-accent-pink/10 text-accent-pink rounded-xl mr-4">
                      <Upload className="h-6 w-6" />
                    </div>
                    <h3 className="text-2xl font-heading font-bold text-foreground">
                      For Sellers
                    </h3>
                  </div>
                  <div className="space-y-4">
                    {[
                      'Upload datasets with validation',
                      'Set competitive pricing',
                      'Respond to custom requests',
                      'Earn 85% revenue share'
                    ].map((step, index) => (
                      <div key={index} className="flex items-start space-x-3">
                        <div className="flex-shrink-0 w-6 h-6 bg-accent-pink text-white rounded-full flex items-center justify-center text-sm font-medium">
                          {index + 1}
                        </div>
                        <p className="text-muted-foreground">{step}</p>
                      </div>
                    ))}
                  </div>
                  <Button className="w-full mt-6" asChild>
                    <Link to="/auth?mode=register&role=seller">
                      Start Selling
                      <ArrowRight className="ml-2 h-4 w-4" />
                    </Link>
                  </Button>
                </CardContent>
              </Card>
            </motion.div>
          </div>
        </div>
      </section>

      {/* Testimonials */}
      <section className="py-20 md:py-32 bg-background-secondary">
        <div className="container px-4 mx-auto">
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
            viewport={{ once: true }}
            className="text-center mb-16"
          >
            <h2 className="text-3xl md:text-5xl font-heading font-bold text-foreground mb-6">
              Trusted by Data Scientists
            </h2>
            <p className="text-xl text-muted-foreground max-w-3xl mx-auto">
              Join thousands of professionals who trust our platform for their data needs.
            </p>
          </motion.div>
          <div className="grid md:grid-cols-3 gap-8 max-w-6xl mx-auto">
            {testimonials.map((testimonial, index) => (
              <motion.div
                key={testimonial.name}
                initial={{ opacity: 0, y: 30 }}
                whileInView={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.6, delay: index * 0.1 }}
                viewport={{ once: true }}
              >
                <Card className="h-full border-0 shadow-soft hover:shadow-medium transition-all duration-300">
                  <CardContent className="p-6">
                    <div className="flex items-center mb-4">
                      {[...Array(testimonial.rating)].map((_, i) => (
                        <Star key={i} className="h-4 w-4 text-accent-amber fill-current" />
                      ))}
                    </div>
                    <p className="text-muted-foreground mb-4 text-sm leading-relaxed">
                      "{testimonial.content}"
                    </p>
                    <div className="flex items-center">
                      <div className="w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center mr-3">
                        <span className="text-primary font-medium text-sm">
                          {testimonial.name.split(' ').map(n => n[0]).join('')}
                        </span>
                      </div>
                      <div>
                        <p className="font-medium text-foreground text-sm">{testimonial.name}</p>
                        <p className="text-xs text-muted-foreground">{testimonial.role}</p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </motion.div>
            ))}
          </div>
        </div>
      </section>

      {/* CTA Section */}
      <section className="py-20 md:py-32 bg-background-secondary flex justify-center items-center">
        <div className="max-w-2xl w-full px-4 flex flex-col items-center">
          <h2 className="text-3xl md:text-5xl font-extrabold font-heading text-primary text-center mb-2 mt-2">
            Fuel Your Data Dreams <span role="img" aria-label="rocket">ð</span>
          </h2>
          <p className="text-lg md:text-xl text-center text-muted-foreground mb-8 max-w-xl">
            Join thousands of data pros transforming their workflows with DataNestX.
          </p>
          <div className="flex flex-col sm:flex-row gap-4 w-full justify-center">
            <Button
              size="lg"
              className="
                bg-primary text-white text-lg font-bold px-8 py-5 rounded-xl
                hover:bg-primary-hover shadow-lg
                transition-transform hover:-translate-y-1
                w-full sm:w-auto
              "
              asChild
            >
              <Link to="/marketplace" aria-label="Browse available datasets">
                <Database className="mr-2 h-5 w-5" />
                Browse Datasets
              </Link>
            </Button>
            <Button
              size="lg"
              variant="outline"
              className="
                border-primary text-primary text-lg font-bold px-8 py-5 rounded-xl
                hover:bg-primary/10 shadow-md
                transition-transform hover:-translate-y-1
                w-full sm:w-auto
              "
              asChild
            >
              <Link to="/auth" aria-label="Sign up and get started">
                <Rocket className="mr-2 h-5 w-5" />
                Get Started
              </Link>
            </Button>
          </div>
        </div>
      </section>
    </div>
  );
};

frontend\src\pages\Marketplace.tsx:
// frontend/src/pages/Marketplace.tsx
import React, { useState, useMemo, useEffect } from 'react';
import { motion } from 'framer-motion';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { 
    Search, 
    FileText,
    TrendingUp,
    SlidersHorizontal,
    Loader2
} from 'lucide-react';
import { categories, formats } from '@/data/mockData';
import { DatasetCard } from '@/components/DatasetCard';
import { RequestCard } from '@/components/RequestCard';
import { Dataset, DatasetRequest } from '@/types';
import { useToast } from '@/hooks/use-toast';

const API_URL = 'http://localhost:5000/api';

export const Marketplace: React.FC = () => {
    const [activeTab, setActiveTab] = useState<'datasets' | 'requests'>('datasets');
    const [searchQuery, setSearchQuery] = useState('');
    const [selectedCategory, setSelectedCategory] = useState('All Categories');
    const [selectedFormat, setSelectedFormat] = useState('All Formats');
    const [sortBy, setSortBy] = useState('popular');
    const [priceRange, setPriceRange] = useState<'all' | 'free' | 'under-100' | 'under-500' | 'premium'>('all');

    const [datasets, setDatasets] = useState<Dataset[]>([]);
    const [requests, setRequests] = useState<DatasetRequest[]>([]);
    const [loading, setLoading] = useState(true);
    const { toast } = useToast();

    useEffect(() => {
        const fetchData = async () => {
            setLoading(true);
            const token = localStorage.getItem('token');
            const headers = token ? { Authorization: `Bearer ${token}` } : {};

            try {
                const [datasetsRes, requestsRes] = await Promise.all([
                    fetch(`${API_URL}/datasets`, { headers }),
                    fetch(`${API_URL}/requests/available`, { headers }) // FIX: Fetch available requests
                ]);

                if (!datasetsRes.ok || !requestsRes.ok) {
                    throw new Error("Failed to fetch marketplace data.");
                }

                const datasetsData = await datasetsRes.json();
                const requestsData = await requestsRes.json();
                
                setDatasets(datasetsData);
                setRequests(requestsData);

            } catch (err: any) {
                toast({ title: "Error", description: err.message || "Could not load marketplace data.", variant: "destructive" });
            } finally {
                setLoading(false);
            }
        };
        fetchData();
    }, [toast]);

    const filteredDatasets = useMemo(() => {
        let filtered = datasets.filter(dataset => {
            const matchesSearch = dataset.title?.toLowerCase().includes(searchQuery.toLowerCase()) ||
                                  dataset.description?.toLowerCase().includes(searchQuery.toLowerCase());
            const matchesCategory = selectedCategory === 'All Categories' || dataset.category === selectedCategory;
            const matchesFormat = selectedFormat === 'All Formats' || dataset.format === selectedFormat;
            const matchesPrice = (() => {
                switch (priceRange) {
                    case 'free': return dataset.price === 0;
                    case 'under-100': return dataset.price > 0 && dataset.price <= 100;
                    case 'under-500': return dataset.price > 100 && dataset.price <= 500;
                    case 'premium': return dataset.price > 500;
                    default: return true;
                }
            })();
            return matchesSearch && matchesCategory && matchesFormat && matchesPrice;
        });

        switch (sortBy) {
            case 'price-low': return [...filtered].sort((a, b) => a.price - b.price);
            case 'price-high': return [...filtered].sort((a, b) => b.price - a.price);
            default: return filtered;
        }
    }, [datasets, searchQuery, selectedCategory, selectedFormat, sortBy, priceRange]);

    const filteredRequests = useMemo(() => {
        return requests.filter(request => {
            const matchesSearch = request.title?.toLowerCase().includes(searchQuery.toLowerCase()) ||
                                  request.description?.toLowerCase().includes(searchQuery.toLowerCase());
            const matchesCategory = selectedCategory === 'All Categories' || request.category === selectedCategory;
            return matchesSearch && matchesCategory;
        });
    }, [requests, searchQuery, selectedCategory]);

    if (loading) {
        return (
            <div className="min-h-screen flex items-center justify-center bg-background">
                <Loader2 className="h-8 w-8 animate-spin" />
            </div>
        );
    }

    return (
        <div className="min-h-screen bg-background py-8">
            <div className="container px-4 mx-auto">
                <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} className="mb-8 text-center">
                    <h1 className="text-4xl font-bold">Dataset Marketplace</h1>
                    <p className="text-lg text-muted-foreground mt-2">Find the perfect data for your next project.</p>
                </motion.div>

                <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as any)} className="mb-8">
                    <div className="flex justify-center mb-8">
                        <TabsList>
                            <TabsTrigger value="datasets"><FileText className="h-4 w-4 mr-2" />Datasets</TabsTrigger>
                            <TabsTrigger value="requests"><TrendingUp className="h-4 w-4 mr-2" />Requests</TabsTrigger>
                        </TabsList>
                    </div>

                    <motion.div
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ delay: 0.1 }}
                        className="bg-card border rounded-lg p-6 mb-8"
                    >
                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4 items-center">
                            <div className="lg:col-span-2 relative">
                                <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" />
                                <Input
                                    placeholder={`Search ${activeTab}...`}
                                    value={searchQuery}
                                    onChange={(e) => setSearchQuery(e.target.value)}
                                    className="pl-10"
                                />
                            </div>

                            <Select value={selectedCategory} onValueChange={setSelectedCategory}>
                                <SelectTrigger><SelectValue placeholder="Category" /></SelectTrigger>
                                <SelectContent>
                                    {categories.map((category) => (
                                        <SelectItem key={category} value={category}>{category}</SelectItem>
                                    ))}
                                </SelectContent>
                            </Select>

                            {activeTab === 'datasets' && (
                                <>
                                    <Select value={selectedFormat} onValueChange={setSelectedFormat}>
                                        <SelectTrigger><SelectValue placeholder="Format" /></SelectTrigger>
                                        <SelectContent>
                                            <SelectItem value="All Formats">All Formats</SelectItem>
                                            {formats.map((format) => (
                                                <SelectItem key={format} value={format}>{format}</SelectItem>
                                            ))}
                                        </SelectContent>
                                    </Select>

                                    <Select value={sortBy} onValueChange={setSortBy}>
                                        <SelectTrigger><SelectValue placeholder="Sort by" /></SelectTrigger>
                                        <SelectContent>
                                            <SelectItem value="popular">Most Popular</SelectItem>
                                            <SelectItem value="newest">Newest</SelectItem>
                                            <SelectItem value="price-low">Price: Low to High</SelectItem>
                                            <SelectItem value="price-high">Price: High to Low</SelectItem>
                                        </SelectContent>
                                    </Select>
                                </>
                            )}
                        </div>
                    </motion.div>

                    <TabsContent value="datasets">
                        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
                            {filteredDatasets.map((dataset, index) => (
                                <DatasetCard key={dataset._id} dataset={dataset} index={index} />
                            ))}
                        </div>
                        {filteredDatasets.length === 0 && <p className="text-center text-muted-foreground py-12">No datasets found.</p>}
                    </TabsContent>

                    <TabsContent value="requests">
                        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
                            {filteredRequests.map((request, index) => (
                                <RequestCard key={request._id} request={request} index={index} />
                            ))}
                        </div>
                        {filteredRequests.length === 0 && <p className="text-center text-muted-foreground py-12">No requests found.</p>}
                    </TabsContent>
                </Tabs>
            </div>
        </div>
    );
};

frontend\src\pages\MessagesPage.tsx:
// frontend/src/pages/MessagesPage.tsx
import React, { useState, useEffect, useRef } from 'react';
import { useAuth } from '@/contexts/AuthContext';
import axios from 'axios';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card } from '@/components/ui/card';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Badge } from '@/components/ui/badge';
import { Skeleton } from '@/components/ui/skeleton';
import { SendHorizonal, MessageSquareDashed } from 'lucide-react';
import { formatDistanceToNow } from 'date-fns';
import { Message, Conversation, User } from '@/types';
import { useToast } from '@/hooks/use-toast';

const API_URL = 'http://localhost:5000/api';

export const MessagesPage: React.FC = () => {
    const { user, isLoading: authLoading } = useAuth();
    const { toast } = useToast();
    const [conversations, setConversations] = useState<Conversation[]>([]);
    const [activeConversation, setActiveConversation] = useState<Conversation | null>(null);
    const [messages, setMessages] = useState<Message[]>([]);
    const [newMessage, setNewMessage] = useState('');
    const [loadingConversations, setLoadingConversations] = useState(true);
    const [loadingMessages, setLoadingMessages] = useState(false);
    const messagesEndRef = useRef<HTMLDivElement>(null);

    const scrollToBottom = () => {
        messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
    };

    useEffect(() => {
        scrollToBottom();
    }, [messages]);

    useEffect(() => {
        if (authLoading || !user) return;
        
        const fetchConversations = async () => {
            setLoadingConversations(true);
            try {
                const token = localStorage.getItem('token');
                const res = await axios.get(`${API_URL}/messages/recent-conversations`, {
                    headers: { Authorization: `Bearer ${token}` },
                });
                setConversations(res.data);
            } catch (error) {
                toast({ title: 'Error', description: 'Failed to load conversations.', variant: 'destructive' });
            } finally {
                setLoadingConversations(false);
            }
        };
        fetchConversations();
    }, [user, authLoading, toast]);

    const handleSelectConversation = async (conversation: Conversation) => {
        setActiveConversation(conversation);
        setLoadingMessages(true);
        try {
            const token = localStorage.getItem('token');
            const res = await axios.get(`${API_URL}/messages/conversation/${conversation.participantId}`, {
                headers: { Authorization: `Bearer ${token}` },
            });
            setMessages(res.data);
            setConversations(prev => prev.map(c => 
                c.participantId === conversation.participantId ? { ...c, unreadCount: 0 } : c
            ));
        } catch (error) {
            toast({ title: 'Error', description: 'Failed to load messages.', variant: 'destructive' });
        } finally {
            setLoadingMessages(false);
        }
    };

    const handleSendMessage = async (e: React.FormEvent) => {
        e.preventDefault();
        if (!newMessage.trim() || !activeConversation || !user) return;

        const tempMessageId = Date.now().toString();
        const messageData = {
            receiverId: activeConversation.participantId,
            content: newMessage,
        };
        
        const senderAsUser: User = {
            id: user.id,
            _id: user._id,
            name: user.name,
            email: user.email,
            role: user.role,
            avatarUrl: user.avatarUrl,
        };

        const optimisticMessage: Message = {
            _id: tempMessageId,
            sender: senderAsUser,
            receiver: { 
                id: activeConversation.participantId, 
                _id: activeConversation.participantId, 
                name: activeConversation.participantName, 
                email: '',
                role: 'buyer' 
            },
            content: newMessage,
            read: false,
            createdAt: new Date().toISOString(),
        };

        setMessages(prev => [...prev, optimisticMessage]);
        setNewMessage('');

        try {
            const token = localStorage.getItem('token');
            await axios.post(`${API_URL}/messages`, messageData, {
                headers: { Authorization: `Bearer ${token}` },
            });
        } catch (error) {
            toast({ title: 'Error', description: 'Failed to send message.', variant: 'destructive' });
            setMessages(prev => prev.filter(m => m._id !== tempMessageId));
        }
    };

    if (authLoading) {
        return (
            <div className="flex items-center justify-center h-[calc(100vh-12rem)]">
                <p>Loading user session...</p>
            </div>
        );
    }

    return (
        <div className="container mx-auto py-8">
            <Card className="h-[calc(100vh-12rem)] w-full grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4">
                {/* Conversations List */}
                <div className="col-span-1 border-r border-border">
                    <div className="p-4 border-b border-border">
                        <h2 className="text-xl font-bold">Conversations</h2>
                    </div>
                    <ScrollArea className="h-[calc(100vh-16rem)]">
                        {loadingConversations ? (
                            <div className="p-4 space-y-4">
                                {[...Array(5)].map((_, i) => <Skeleton key={i} className="h-16 w-full" />)}
                            </div>
                        ) : conversations.length === 0 ? (
                            <div className="p-4 text-center text-muted-foreground">No conversations yet.</div>
                        ) : (
                            conversations.map(convo => (
                                <div
                                    key={convo.participantId}
                                    className={`flex items-center p-4 cursor-pointer hover:bg-muted/50 ${activeConversation?.participantId === convo.participantId ? 'bg-muted' : ''}`}
                                    onClick={() => handleSelectConversation(convo)}
                                >
                                    <Avatar className="h-12 w-12 mr-4">
                                        <AvatarImage src={convo.participantAvatar} />
                                        <AvatarFallback>{convo.participantName.charAt(0)}</AvatarFallback>
                                    </Avatar>
                                    <div className="flex-1 overflow-hidden">
                                        <div className="flex justify-between items-center">
                                            <h3 className="font-semibold truncate">{convo.participantName}</h3>
                                            <span className="text-xs text-muted-foreground whitespace-nowrap">
                                                {formatDistanceToNow(new Date(convo.lastMessageTime), { addSuffix: true })}
                                            </span>
                                        </div>
                                        <div className="flex justify-between items-start">
                                            <p className="text-sm text-muted-foreground truncate">{convo.lastMessage}</p>
                                            {convo.unreadCount > 0 && (
                                                <Badge className="h-5 w-5 p-0 flex items-center justify-center">{convo.unreadCount}</Badge>
                                            )}
                                        </div>
                                    </div>
                                </div>
                            ))
                        )}
                    </ScrollArea>
                </div>

                {/* Active Chat Window */}
                <div className="md:col-span-2 lg:col-span-3 flex flex-col">
                    {activeConversation ? (
                        <>
                            <div className="flex items-center p-4 border-b border-border">
                                <Avatar className="h-10 w-10 mr-4">
                                    <AvatarImage src={activeConversation.participantAvatar} />
                                    <AvatarFallback>{activeConversation.participantName.charAt(0)}</AvatarFallback>
                                </Avatar>
                                <h3 className="text-lg font-semibold">{activeConversation.participantName}</h3>
                            </div>
                            <ScrollArea className="flex-1 p-4 bg-muted/20">
                                {loadingMessages ? (
                                    <div className="space-y-4 p-4">
                                        <Skeleton className="h-12 w-3/4 rounded-lg" />
                                        <Skeleton className="h-12 w-3/4 ml-auto rounded-lg" />
                                        <Skeleton className="h-12 w-3/4 rounded-lg" />
                                    </div>
                                ) : (
                                    messages.map(msg => (
                                        <div key={msg._id} className={`flex my-2 ${msg.sender._id === user?.id ? 'justify-end' : 'justify-start'}`}>
                                            <div className={`max-w-xs lg:max-w-md p-3 rounded-lg ${msg.sender._id === user?.id ? 'bg-primary text-primary-foreground' : 'bg-background border'}`}>
                                                <p className="text-sm">{msg.content}</p>
                                                <p className={`text-xs mt-1 text-right ${msg.sender._id === user?.id ? 'text-primary-foreground/70' : 'text-muted-foreground'}`}>
                                                    {formatDistanceToNow(new Date(msg.createdAt), { addSuffix: true })}
                                                </p>
                                            </div>
                                        </div>
                                    ))
                                )}
                                <div ref={messagesEndRef} />
                            </ScrollArea>
                            <div className="p-4 border-t border-border bg-background">
                                <form onSubmit={handleSendMessage} className="flex items-center space-x-2">
                                    <Input
                                        value={newMessage}
                                        onChange={(e) => setNewMessage(e.target.value)}
                                        placeholder="Type your message..."
                                        autoComplete="off"
                                        className="flex-1"
                                    />
                                    <Button type="submit" size="icon" disabled={!newMessage.trim()}>
                                        <SendHorizonal className="h-5 w-5" />
                                    </Button>
                                </form>
                            </div>
                        </>
                    ) : (
                        <div className="flex flex-col items-center justify-center h-full text-muted-foreground">
                            <MessageSquareDashed className="h-24 w-24 mb-4" />
                            <h2 className="text-xl font-medium">Select a conversation</h2>
                            <p>Choose a conversation from the left to start chatting.</p>
                        </div>
                    )}
                </div>
            </Card>
        </div>
    );
};

frontend\src\pages\MyOffers.tsx:
// frontend/src/pages/MyOffers.tsx
import React, { useEffect, useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { useAuth } from '@/contexts/AuthContext';
import { useToast } from '@/hooks/use-toast';
import { Proposal, DatasetRequest } from '@/types'; // FIX: Import from central types
import { Badge } from '@/components/ui/badge';
import { Link } from 'react-router-dom';

// FIX: Define a more specific type for the fetched proposal, where 'request' is populated
type PopulatedProposal = Omit<Proposal, 'request'> & {
    request: DatasetRequest;
};

const MyOffers: React.FC = () => {
    const { user } = useAuth();
    const { toast } = useToast();
    const [offers, setOffers] = useState<PopulatedProposal[]>([]);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        const fetchOffers = async () => {
            try {
                const token = localStorage.getItem('token');
                if (!token) {
                    setLoading(false);
                    toast({ title: 'Authentication Required', variant: 'destructive' });
                    return;
                }

                // FIX: Call the new backend endpoint to get proposals SENT by the seller
                const res = await fetch('http://localhost:5000/api/proposals/sent', {
                    headers: {
                        Authorization: `Bearer ${token}`,
                    },
                });

                if (!res.ok) {
                    const errorData = await res.json();
                    throw new Error(errorData.error || 'Failed to fetch offers');
                }
                const data: PopulatedProposal[] = await res.json();
                setOffers(data);
            } catch (err: any) {
                toast({
                    title: 'Error loading offers',
                    description: err.message || 'Please try again later.',
                    variant: 'destructive',
                });
            } finally {
                setLoading(false);
            }
        };

        if (user?.role === 'seller') {
            fetchOffers();
        } else {
            setLoading(false);
        }
    }, [user, toast]);

    if (loading) return <div className="text-center mt-10">Loading your proposals...</div>;

    if (!user || user.role !== 'seller') {
        return <div className="text-center text-muted-foreground my-10">Only sellers can view their proposals.</div>;
    }

    return (
        <div className="container max-w-5xl mx-auto py-10 px-4">
            <h1 className="text-2xl font-bold mb-6">My Sent Proposals</h1>

            {offers.length === 0 ? (
                <p className="text-muted-foreground">You havenât submitted any proposals yet.</p>
            ) : (
                <div className="grid gap-6">
                    {offers.map((offer) => (
                        <Link to={`/request/${offer.request._id}`} key={offer._id} className="block hover:no-underline">
                            <Card className="hover:border-primary transition-colors">
                                <CardHeader>
                                    <div className="flex justify-between items-start">
                                        <CardTitle className="text-xl">
                                            {offer.request?.title || 'Untitled Request'}
                                        </CardTitle>
                                        <Badge variant={offer.status === 'pending' ? 'outline' : 'default'} className="capitalize">{offer.status}</Badge>
                                    </div>
                                    <p className="text-sm text-muted-foreground">
                                        {offer.request?.category || 'Uncategorized'}
                                    </p>
                                </CardHeader>
                                <CardContent className="space-y-2">
                                    <div>
                                        <strong>Your Offer:</strong> ${offer.price}
                                    </div>
                                    <p className="text-sm text-muted-foreground line-clamp-2">
                                        <strong>Message:</strong> {offer.coverLetter}
                                    </p>
                                    <div className="text-xs text-muted-foreground pt-2">
                                        Submitted on {new Date(offer.createdAt).toLocaleDateString()}
                                    </div>
                                </CardContent>
                            </Card>
                        </Link>
                    ))}
                </div>
            )}
        </div>
    );
};

export default MyOffers;

frontend\src\pages\NotFound.tsx:

import React from 'react';
import { motion } from 'framer-motion';
import { Link } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Home, Search, ArrowLeft, Database } from 'lucide-react';

const NotFound: React.FC = () => {
  return (
    <div className="min-h-screen bg-background-secondary flex items-center justify-center p-4">
      <motion.div
        initial={{ opacity: 0, y: 30 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6 }}
        className="text-center max-w-2xl mx-auto"
      >
        <Card className="border-0 shadow-strong">
          <CardContent className="p-12">
            {/* 404 Animation */}
            <motion.div
              initial={{ scale: 0.8 }}
              animate={{ scale: 1 }}
              transition={{ duration: 0.8, ease: "easeOut" }}
              className="mb-8"
            >
              <div className="text-8xl md:text-9xl font-bold text-gradient mb-4">
                404
              </div>
              <div className="flex justify-center mb-6">
                <motion.div
                  animate={{ 
                    rotate: [0, 10, -10, 0],
                    scale: [1, 1.1, 1]
                  }}
                  transition={{ 
                    duration: 2,
                    repeat: Infinity,
                    repeatType: "reverse"
                  }}
                >
                  <Database className="h-16 w-16 text-primary" />
                </motion.div>
              </div>
            </motion.div>

            <h1 className="text-3xl md:text-4xl font-heading font-bold text-foreground mb-4">
              Page Not Found
            </h1>
            
            <p className="text-lg text-muted-foreground mb-8 max-w-md mx-auto">
              Oops! The page you're looking for seems to have wandered off into the data void. 
              Let's get you back on track.
            </p>

            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <Button asChild className="gradient-primary">
                <Link to="/">
                  <Home className="h-4 w-4 mr-2" />
                  Back to Home
                </Link>
              </Button>
              
              <Button variant="outline" asChild>
                <Link to="/marketplace">
                  <Search className="h-4 w-4 mr-2" />
                  Browse Datasets
                </Link>
              </Button>
            </div>

            {/* Helpful Links */}
            <div className="mt-12 pt-8 border-t border-border">
              <p className="text-sm text-muted-foreground mb-4">
                Looking for something specific?
              </p>
              <div className="flex flex-wrap justify-center gap-4 text-sm">
                <Link 
                  to="/marketplace" 
                  className="text-primary hover:text-primary-hover transition-colors"
                >
                  Marketplace
                </Link>
                <Link 
                  to="/auth" 
                  className="text-primary hover:text-primary-hover transition-colors"
                >
                  Sign In
                </Link>
                <Link 
                  to="/upload-dataset" 
                  className="text-primary hover:text-primary-hover transition-colors"
                >
                  Upload Dataset
                </Link>
                <Link 
                  to="/post-request" 
                  className="text-primary hover:text-primary-hover transition-colors"
                >
                  Post Request
                </Link>
              </div>
            </div>
          </CardContent>
        </Card>
      </motion.div>
    </div>
  );
};

export default NotFound;

frontend\src\pages\PostRequest.tsx:
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { useNavigate } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { useToast } from '@/hooks/use-toast';
import { useAuth } from '@/contexts/AuthContext';
import { 
  TrendingUp, 
  DollarSign, 
  Calendar, 
  FileText, 
  Tags, 
  Users,
  AlertCircle,
  CheckCircle,
  Plus,
  X
} from 'lucide-react';
import { categories } from '@/data/mockData';

interface FormData {
  title: string;
  description: string;
  category: string;
  budget: {
    min: string;
    max: string;
  };
  deadline: string;
  requirements: string;
  deliverables: string;
  tags: string[];
}

export const PostRequest: React.FC = () => {
  const navigate = useNavigate();
  const { user } = useAuth();
  const { toast } = useToast();
  
  const [formData, setFormData] = useState<FormData>({
    title: '',
    description: '',
    category: '',
    budget: { min: '', max: '' },
    deadline: '',
    requirements: '',
    deliverables: '',
    tags: []
  });
  
  const [currentTag, setCurrentTag] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleInputChange = (field: string, value: string) => {
    if (field.includes('.')) {
      const [parent, child] = field.split('.');
      setFormData(prev => ({
        ...prev,
        [parent]: { 
          ...(prev[parent as keyof FormData] as { min: string; max: string }), 
          [child]: value 
        }
      }));
    } else {
      setFormData(prev => ({ ...prev, [field]: value }));
    }
  };

  const addTag = () => {
    if (currentTag.trim() && !formData.tags.includes(currentTag.trim())) {
      setFormData(prev => ({
        ...prev,
        tags: [...prev.tags, currentTag.trim()]
      }));
      setCurrentTag('');
    }
  };

  const removeTag = (tagToRemove: string) => {
    setFormData(prev => ({
      ...prev,
      tags: prev.tags.filter(tag => tag !== tagToRemove)
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!user) {
      toast({
        title: "Authentication Required",
        description: "Please sign in to post a data request.",
        variant: "destructive"
      });
      return;
    }

    setIsSubmitting(true);

    const token = localStorage.getItem('token');
    try {
      const res = await fetch('http://localhost:5000/api/requests', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`
        },
        body: JSON.stringify({
          title: formData.title,
          description: formData.description,
          category: formData.category,
          tags: formData.tags,
          budget: {
            min: Number(formData.budget.min),
            max: Number(formData.budget.max)
          },
          deadline: formData.deadline,
          // optionally, add requirements and deliverables to description/body
        })
      });

      const data = await res.json();

      if (!res.ok) {
        toast({
          title: "Failed to post request",
          description: data?.error || "There was a problem. Try again.",
          variant: "destructive"
        });
        setIsSubmitting(false);
        return;
      }

      toast({
        title: "Request Posted Successfully!",
        description: "Your data request has been published to the marketplace.",
      });
      navigate('/buyer-dashboard');
    } catch (err) {
      toast({
        title: "Failed to post request",
        description: "There was a problem connecting to the server.",
        variant: "destructive"
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  if (!user || user.role !== 'buyer') {
    return (
      <div className="min-h-screen bg-background-secondary flex items-center justify-center p-4">
        <Card className="max-w-md">
          <CardContent className="p-6 text-center">
            <AlertCircle className="h-12 w-12 text-warning mx-auto mb-4" />
            <h2 className="text-xl font-heading font-semibold mb-2">Access Restricted</h2>
            <p className="text-muted-foreground mb-4">
              Only buyers can post data requests. Please sign in with a buyer account.
            </p>
            <Button onClick={() => navigate('/auth')} className="w-full">
              Sign In
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-background-secondary py-8">
      <div className="container px-4 mx-auto max-w-4xl">
        {/* Header */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
          className="mb-8"
        >
          <h1 className="text-3xl md:text-4xl font-heading font-bold text-foreground mb-2">
            Post a Data Request
          </h1>
          <p className="text-lg text-muted-foreground">
            Describe the dataset you need and connect with data providers worldwide
          </p>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.1 }}
        >
          <Card className="border-0 shadow-medium">
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <TrendingUp className="h-5 w-5 text-primary" />
                <span>Request Details</span>
              </CardTitle>
              <CardDescription>
                Provide detailed information about the dataset you're looking for
              </CardDescription>
            </CardHeader>
            
            <CardContent>
              <form onSubmit={handleSubmit} className="space-y-6">
                {/* Title */}
                <div className="space-y-2">
                  <Label htmlFor="title" className="flex items-center space-x-2">
                    <FileText className="h-4 w-4" />
                    <span>Request Title</span>
                  </Label>
                  <Input
                    id="title"
                    placeholder="e.g., E-commerce Customer Behavior Dataset"
                    value={formData.title}
                    onChange={(e) => handleInputChange('title', e.target.value)}
                    required
                  />
                </div>

                {/* Category */}
                <div className="space-y-2">
                  <Label>Category</Label>
                  <Select value={formData.category} onValueChange={(value) => handleInputChange('category', value)}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select a category" />
                    </SelectTrigger>
                    <SelectContent>
                      {categories.filter(cat => cat !== 'All Categories').map((category) => (
                        <SelectItem key={category} value={category}>
                          {category}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                {/* Description */}
                <div className="space-y-2">
                  <Label htmlFor="description">Description</Label>
                  <Textarea
                    id="description"
                    placeholder="Describe the dataset you need, its purpose, and any specific requirements..."
                    value={formData.description}
                    onChange={(e) => handleInputChange('description', e.target.value)}
                    rows={4}
                    required
                  />
                </div>

                {/* Budget Range */}
                <div className="space-y-2">
                  <Label className="flex items-center space-x-2">
                    <DollarSign className="h-4 w-4" />
                    <span>Budget Range (USD)</span>
                  </Label>
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <Label htmlFor="min-budget" className="text-sm text-muted-foreground">Minimum</Label>
                      <Input
                        id="min-budget"
                        type="number"
                        placeholder="100"
                        value={formData.budget.min}
                        onChange={(e) => handleInputChange('budget.min', e.target.value)}
                        required
                      />
                    </div>
                    <div>
                      <Label htmlFor="max-budget" className="text-sm text-muted-foreground">Maximum</Label>
                      <Input
                        id="max-budget"
                        type="number"
                        placeholder="1000"
                        value={formData.budget.max}
                        onChange={(e) => handleInputChange('budget.max', e.target.value)}
                        required
                      />
                    </div>
                  </div>
                </div>

                {/* Deadline */}
                <div className="space-y-2">
                  <Label htmlFor="deadline" className="flex items-center space-x-2">
                    <Calendar className="h-4 w-4" />
                    <span>Deadline</span>
                  </Label>
                  <Input
                    id="deadline"
                    type="date"
                    value={formData.deadline}
                    onChange={(e) => handleInputChange('deadline', e.target.value)}
                    required
                  />
                </div>

                {/* Requirements */}
                <div className="space-y-2">
                  <Label htmlFor="requirements">Specific Requirements</Label>
                  <Textarea
                    id="requirements"
                    placeholder="Data format, size, time period, geographic coverage, etc..."
                    value={formData.requirements}
                    onChange={(e) => handleInputChange('requirements', e.target.value)}
                    rows={3}
                  />
                </div>

                {/* Deliverables */}
                <div className="space-y-2">
                  <Label htmlFor="deliverables">Expected Deliverables</Label>
                  <Textarea
                    id="deliverables"
                    placeholder="What should be included in the final delivery..."
                    value={formData.deliverables}
                    onChange={(e) => handleInputChange('deliverables', e.target.value)}
                    rows={3}
                  />
                </div>

                {/* Tags */}
                <div className="space-y-2">
                  <Label className="flex items-center space-x-2">
                    <Tags className="h-4 w-4" />
                    <span>Tags</span>
                  </Label>
                  <div className="flex space-x-2">
                    <Input
                      placeholder="Add tags (e.g., machine learning, retail, CSV)"
                      value={currentTag}
                      onChange={(e) => setCurrentTag(e.target.value)}
                      onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), addTag())}
                    />
                    <Button type="button" variant="outline" onClick={addTag}>
                      <Plus className="h-4 w-4" />
                    </Button>
                  </div>
                  {formData.tags.length > 0 && (
                    <div className="flex flex-wrap gap-2 mt-2">
                      {formData.tags.map((tag) => (
                        <Badge key={tag} variant="secondary" className="flex items-center space-x-1">
                          <span>{tag}</span>
                          <Button
                            type="button"
                            variant="ghost"
                            size="sm"
                            className="h-4 w-4 p-0 hover:bg-transparent"
                            onClick={() => removeTag(tag)}
                          >
                            <X className="h-3 w-3" />
                          </Button>
                        </Badge>
                      ))}
                    </div>
                  )}
                </div>

                {/* Submit */}
                <div className="flex space-x-4 pt-6">
                  <Button
                    type="submit"
                    disabled={isSubmitting}
                    className="flex-1 gradient-primary"
                  >
                    {isSubmitting ? (
                      <>
                        <motion.div
                          animate={{ rotate: 360 }}
                          transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
                          className="mr-2"
                        >
                          <Users className="h-4 w-4" />
                        </motion.div>
                        Publishing Request...
                      </>
                    ) : (
                      <>
                        <CheckCircle className="h-4 w-4 mr-2" />
                        Post Request
                      </>
                    )}
                  </Button>
                  <Button
                    type="button"
                    variant="outline"
                    onClick={() => navigate('/marketplace')}
                  >
                    Cancel
                  </Button>
                </div>
              </form>
            </CardContent>
          </Card>
        </motion.div>
      </div>
    </div>
  );
};

frontend\src\pages\Pricing.tsx:
import React from "react";
const Pricing = () => (
  <div className="p-8 text-center text-xl">Pricing Info coming soon!</div>
);
export default Pricing;

frontend\src\pages\Privacy.tsx:
  import React from "react";
  const Privacy = () => (
    <div className="p-8 text-center text-xl">Privacy Policy coming soon!</div>
  );
  export default Privacy;

frontend\src\pages\QualityStandards.tsx:
import React from "react";
const QualityStandards = () => (
  <div className="p-8 text-center text-xl">Quality Standards coming soon!</div>
);
export default QualityStandards;

frontend\src\pages\RequestDetailsPage.tsx:
// frontend/src/pages/RequestDetailsPage.tsx
import React, { useState, useEffect, useRef } from 'react';
import { useParams, useNavigate, useLocation } from 'react-router-dom';
import axios from 'axios';
import { useAuth } from '@/contexts/AuthContext';
import { DatasetRequest, Proposal, User } from '@/types';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Textarea } from '@/components/ui/textarea';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';
import { useToast } from '@/hooks/use-toast';
import { Loader2, Check, Clock, Send, DollarSign, Lock, ShieldCheck, Star } from 'lucide-react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { loadStripe } from '@stripe/stripe-js';
import { Elements, PaymentElement, useStripe, useElements } from '@stripe/react-stripe-js';

const API_URL = 'http://localhost:5000/api';
const stripePromise = loadStripe(import.meta.env.VITE_STRIPE_PUBLISHABLE_KEY as string);

const proposalSchema = z.object({
    coverLetter: z.string().min(10, "Cover letter must be at least 10 characters.").max(2000),
    price: z.preprocess((a) => parseInt(z.string().parse(a), 10), z.number().min(5, "Price must be at least $5.")),
    deliveryTime: z.preprocess((a) => parseInt(z.string().parse(a), 10), z.number().min(1, "Delivery time must be at least 1 day.")),
});
type ProposalFormValues = z.infer<typeof proposalSchema>;

const SubmitProposalForm: React.FC<{ requestId: string; onProposalSubmitted: () => void, formRef: React.Ref<HTMLDivElement> }> = ({ requestId, onProposalSubmitted, formRef }) => {
    const { register, handleSubmit, formState: { errors, isSubmitting } } = useForm<ProposalFormValues>({
        resolver: zodResolver(proposalSchema)
    });
    const { toast } = useToast();

    const onSubmit = async (data: ProposalFormValues) => {
        try {
            const token = localStorage.getItem('token');
            await axios.post(`${API_URL}/proposals`, { ...data, requestId }, {
                headers: { Authorization: `Bearer ${token}` }
            });
            toast({ title: "Success", description: "Your proposal has been submitted." });
            onProposalSubmitted();
        } catch (error: any) {
            const errorMessage = error.response?.data?.error || "Failed to submit proposal.";
            toast({ title: "Error", description: errorMessage, variant: "destructive" });
        }
    };

    return (
        <div ref={formRef}>
            <Card>
                <CardHeader>
                    <CardTitle>Submit Your Proposal</CardTitle>
                    <CardDescription>Describe your offer and why you're a good fit for this request.</CardDescription>
                </CardHeader>
                <CardContent>
                    <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
                        <div>
                            <Label htmlFor="coverLetter">Cover Letter</Label>
                            <Textarea id="coverLetter" {...register("coverLetter")} rows={5} />
                            {errors.coverLetter && <p className="text-destructive text-sm mt-1">{errors.coverLetter.message}</p>}
                        </div>
                        <div className="grid grid-cols-2 gap-4">
                            <div>
                                <Label htmlFor="price">Price ($)</Label>
                                <Input id="price" type="number" {...register("price")} />
                                {errors.price && <p className="text-destructive text-sm mt-1">{errors.price.message}</p>}
                            </div>
                            <div>
                                <Label htmlFor="deliveryTime">Delivery Time (days)</Label>
                                <Input id="deliveryTime" type="number" {...register("deliveryTime")} />
                                {errors.deliveryTime && <p className="text-destructive text-sm mt-1">{errors.deliveryTime.message}</p>}
                            </div>
                        </div>
                        <Button type="submit" disabled={isSubmitting} className="w-full">
                            {isSubmitting ? <Loader2 className="animate-spin mr-2" /> : <Send className="mr-2 h-4 w-4" />}
                            Submit Proposal
                        </Button>
                    </form>
                </CardContent>
            </Card>
        </div>
    );
};

const ProposalCard: React.FC<{
    proposal: Proposal;
    isBuyer: boolean;
    isSeller: boolean;
    onAccept: (proposal: Proposal) => void;
    onComplete: (proposalId: string) => void;
    onRelease: (proposalId: string) => void;
    isLoadingAction: boolean;
}> = ({ proposal, isBuyer, isSeller, onAccept, onComplete, onRelease, isLoadingAction }) => {
    return (
        <Card className="hover:shadow-md transition-shadow">
            <CardHeader className="flex flex-row items-center justify-between pb-4">
                <div className="flex items-center gap-4">
                    <Avatar className="h-12 w-12">
                        <AvatarImage src={proposal.seller.avatarUrl} />
                        <AvatarFallback>{proposal.seller.name.charAt(0)}</AvatarFallback>
                    </Avatar>
                    <div>
                        <p className="font-bold text-lg">{proposal.seller.name}</p>
                    </div>
                </div>
                <div className="text-right">
                    <p className="text-2xl font-bold text-primary">${proposal.price}</p>
                    <p className="text-sm text-muted-foreground">{proposal.deliveryTime} day delivery</p>
                </div>
            </CardHeader>
            <CardContent>
                <p className="text-muted-foreground mb-4">{proposal.coverLetter}</p>
                
                {isBuyer && proposal.status === 'pending' && (
                    <Button className="w-full" onClick={() => onAccept(proposal)} disabled={isLoadingAction}>
                        {isLoadingAction ? <Loader2 className="animate-spin mr-2" /> : <Check className="mr-2 h-4 w-4" />}
                        Accept & Fund Escrow
                    </Button>
                )}

                {isSeller && proposal.status === 'accepted' && (
                    <Button className="w-full" onClick={() => onComplete(proposal._id)} disabled={isLoadingAction}>
                        {isLoadingAction ? <Loader2 className="animate-spin mr-2" /> : <ShieldCheck className="mr-2 h-4 w-4" />}
                        Mark as Complete
                    </Button>
                )}

                {isBuyer && proposal.status === 'completed' && (
                    <Button className="w-full" onClick={() => onRelease(proposal._id)} disabled={isLoadingAction}>
                        {isLoadingAction ? <Loader2 className="animate-spin mr-2" /> : <Star className="mr-2 h-4 w-4" />}
                        Release Funds & Complete
                    </Button>
                )}

                {proposal.status === 'accepted' && <Badge variant="secondary">Work In Progress</Badge>}
                {proposal.status === 'completed' && <Badge>Pending Your Approval</Badge>}
                {proposal.status === 'paid' && <Badge variant="default">Completed & Paid</Badge>}
            </CardContent>
        </Card>
    );
};

const CheckoutForm: React.FC<{ onSuccessfulPayment: () => void }> = ({ onSuccessfulPayment }) => {
    const stripe = useStripe();
    const elements = useElements();
    const { toast } = useToast();
    const [isProcessing, setIsProcessing] = useState(false);

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        if (!stripe || !elements) return;

        setIsProcessing(true);

        const { error } = await stripe.confirmPayment({
            elements,
            redirect: 'if_required',
        });

        if (error) {
            toast({ title: "Payment Failed", description: error.message, variant: "destructive" });
            setIsProcessing(false);
        } else {
            toast({ title: "Payment Successful!", description: "Funds are now held in escrow." });
            onSuccessfulPayment();
        }
    };

    return (
        <form onSubmit={handleSubmit}>
            <PaymentElement />
            <Button disabled={isProcessing || !stripe || !elements} className="w-full mt-6">
                {isProcessing ? <Loader2 className="animate-spin mr-2" /> : <Lock className="mr-2 h-4 w-4" />}
                Pay & Fund Escrow
            </Button>
        </form>
    );
};

export const RequestDetailsPage: React.FC = () => {
    const { requestId } = useParams<{ requestId: string }>();
    const { user, isLoading: authLoading } = useAuth();
    const { toast } = useToast();
    const navigate = useNavigate();
    const location = useLocation();
    const [request, setRequest] = useState<DatasetRequest | null>(null);
    const [proposals, setProposals] = useState<Proposal[]>([]);
    const [loading, setLoading] = useState(true);
    const [actionLoading, setActionLoading] = useState(false);
    
    const [isPaymentModalOpen, setIsPaymentModalOpen] = useState(false);
    const [clientSecret, setClientSecret] = useState<string | null>(null);
    const proposalFormRef = useRef<HTMLDivElement>(null);

    const fetchData = async () => {
        setLoading(true);
        const token = localStorage.getItem('token');
        try {
            const requestRes = await axios.get(`${API_URL}/requests/${requestId}`, { headers: { Authorization: `Bearer ${token}` } });
            const requestData = requestRes.data;
            setRequest(requestData);

            const buyerId = typeof requestData.buyer === 'object' ? requestData.buyer._id : requestData.buyer;
            
            if (user?.id === buyerId) {
                const proposalsRes = await axios.get(`${API_URL}/proposals/request/${requestId}`, { headers: { Authorization: `Bearer ${token}` } });
                setProposals(proposalsRes.data);
            }
        } catch (error) {
            toast({ title: "Error", description: "Could not fetch request details.", variant: "destructive" });
            navigate('/marketplace');
        } finally {
            setLoading(false);
        }
    };
    
    useEffect(() => {
        if (!authLoading && user && requestId) {
            fetchData();
        } else if (!authLoading && !user) {
            navigate('/auth');
        }
    }, [requestId, user, authLoading]);

    // FIX: This effect now reliably scrolls to the form when the page loads with the correct hash.
    useEffect(() => {
        if (!loading && location.hash === '#submit-proposal' && proposalFormRef.current) {
            setTimeout(() => {
                proposalFormRef.current?.scrollIntoView({ behavior: 'smooth', block: 'center' });
            }, 100); // A small delay ensures the element is fully rendered
        }
    }, [loading, location.hash]);

    const handleAcceptProposal = async (proposal: Proposal) => {
        setActionLoading(true);
        const token = localStorage.getItem('token');
        try {
            const res = await axios.put(`${API_URL}/proposals/${proposal._id}/accept`, {}, {
                headers: { Authorization: `Bearer ${token}` }
            });
            setClientSecret(res.data.clientSecret);
            setIsPaymentModalOpen(true);
        } catch (error: any) {
            toast({ title: "Error", description: error.response?.data?.error || "Could not accept proposal.", variant: "destructive" });
        } finally {
            setActionLoading(false);
        }
    };

    const handleSuccessfulPayment = () => {
        setIsPaymentModalOpen(false);
        setClientSecret(null);
        fetchData();
    };

    const handleMarkAsComplete = async (proposalId: string) => {
        setActionLoading(true);
        const token = localStorage.getItem('token');
        try {
            await axios.put(`${API_URL}/proposals/${proposalId}/complete`, {}, {
                headers: { Authorization: `Bearer ${token}` }
            });
            toast({ title: "Work Submitted", description: "The buyer has been notified to review your work." });
            fetchData();
        } catch (error: any) {
            toast({ title: "Error", description: error.response?.data?.error || "Could not mark as complete.", variant: "destructive" });
        } finally {
            setActionLoading(false);
        }
    };

    const handleReleaseFunds = async (proposalId: string) => {
        setActionLoading(true);
        const token = localStorage.getItem('token');
        try {
            await axios.post(`${API_URL}/proposals/${proposalId}/release-funds`, {}, {
                headers: { Authorization: `Bearer ${token}` }
            });
            toast({ title: "Funds Released!", description: "The payment has been sent to the seller." });
            fetchData();
        } catch (error: any) {
            toast({ title: "Error", description: error.response?.data?.error || "Could not release funds.", variant: "destructive" });
        } finally {
            setActionLoading(false);
        }
    };

    if (loading || authLoading) {
        return <div className="flex items-center justify-center h-screen"><Loader2 className="h-8 w-8 animate-spin" /></div>;
    }

    if (!request) {
        return <div className="text-center p-8">Request not found.</div>;
    }

    const buyerId = typeof request.buyer === 'object' ? request.buyer._id : request.buyer;
    const isOwner = user?.id === buyerId;
    const hasSubmittedProposal = proposals.some(p => p.seller._id === user?.id);

    return (
        <>
            <div className="container mx-auto py-8 max-w-4xl">
                <Card className="mb-8">
                    <CardHeader>
                        <CardTitle>{request.title}</CardTitle>
                        <CardDescription>{request.description}</CardDescription>
                    </CardHeader>
                    <CardContent>
                        <Badge>{request.category}</Badge>
                    </CardContent>
                </Card>

                {user?.role === 'seller' && !isOwner && !hasSubmittedProposal && request.status === 'open' && (
                    <div className="mb-8">
                        <SubmitProposalForm requestId={requestId!} onProposalSubmitted={fetchData} formRef={proposalFormRef} />
                    </div>
                )}
                
                {isOwner && (
                    <div>
                        <h2 className="text-2xl font-bold mb-4">Proposals Received ({proposals.length})</h2>
                        <div className="space-y-4">
                            {proposals.map(p => (
                                <ProposalCard 
                                    key={p._id} 
                                    proposal={p} 
                                    isBuyer={isOwner}
                                    isSeller={user?.id === p.seller._id}
                                    onAccept={handleAcceptProposal}
                                    onComplete={handleMarkAsComplete}
                                    onRelease={handleReleaseFunds}
                                    isLoadingAction={actionLoading}
                                />
                            ))}
                        </div>
                    </div>
                )}
            </div>

            <Dialog open={isPaymentModalOpen} onOpenChange={setIsPaymentModalOpen}>
                <DialogContent>
                    <DialogHeader>
                        <DialogTitle>Fund Escrow</DialogTitle>
                        <DialogDescription>Enter your payment details to fund the escrow.</DialogDescription>
                    </DialogHeader>
                    {clientSecret && (
                        <Elements stripe={stripePromise} options={{ clientSecret }}>
                            <CheckoutForm onSuccessfulPayment={handleSuccessfulPayment} />
                        </Elements>
                    )}
                </DialogContent>
            </Dialog>
        </>
    );
};

frontend\src\pages\SellerDashboard.tsx:
// frontend/src/pages/SellerDashboard.tsx
import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { useNavigate } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { useAuth } from '@/contexts/AuthContext';
import axios from 'axios';
import {
    Upload,
    FileText,
    DollarSign,
    Plus,
    Loader2,
    Briefcase, // New icon for active jobs
} from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { Dataset, DatasetRequest } from '@/types';
import { RequestCard } from '@/components/RequestCard';
import { DatasetCard } from '@/components/DatasetCard';

const API_URL = 'http://localhost:5000/api';

export const SellerDashboard: React.FC = () => {
    const navigate = useNavigate();
    const { user, isLoading: authLoading } = useAuth();
    const { toast } = useToast();
    const [activeTab, setActiveTab] = useState('overview');
    const [myDatasets, setMyDatasets] = useState<Dataset[]>([]);
    const [availableJobs, setAvailableJobs] = useState<DatasetRequest[]>([]);
    const [activeJobs, setActiveJobs] = useState<DatasetRequest[]>([]); // NEW: State for active jobs
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        const fetchData = async () => {
            if (!user) return;
            setLoading(true);
            const token = localStorage.getItem('token');
            try {
                // NEW: Fetch active jobs in parallel
                const [myDatasetsRes, availableJobsRes, activeJobsRes] = await Promise.all([
                    axios.get(`${API_URL}/datasets/my`, { headers: { Authorization: `Bearer ${token}` } }),
                    axios.get(`${API_URL}/requests/available`, { headers: { Authorization: `Bearer ${token}` } }),
                    axios.get(`${API_URL}/requests/in-progress`, { headers: { Authorization: `Bearer ${token}` } })
                ]);

                if (myDatasetsRes.data) setMyDatasets(myDatasetsRes.data);
                if (availableJobsRes.data) setAvailableJobs(availableJobsRes.data);
                if (activeJobsRes.data) setActiveJobs(activeJobsRes.data); // NEW: Set active jobs state

            } catch (err: any) {
                toast({ title: "Error", description: "Failed to load dashboard data.", variant: "destructive" });
            } finally {
                setLoading(false);
            }
        };

        if (!authLoading) {
            fetchData();
        }
    }, [user, authLoading, toast]);

    const stats = [
        {
            // FIX: Changed "Total Spent" to "Total Earnings"
            title: 'Total Earnings',
            value: `$${myDatasets.reduce((sum, d) => sum + (d.price * (d.downloads || 0)), 0).toFixed(2)}`,
            icon: <DollarSign className="h-5 w-5 text-muted-foreground" />,
        },
        {
            title: 'Published Datasets',
            value: myDatasets.length,
            icon: <Upload className="h-5 w-5 text-muted-foreground" />,
        },
        // NEW: Stat for Active Jobs
        {
            title: 'Active Jobs',
            value: activeJobs.length,
            icon: <Briefcase className="h-5 w-5 text-muted-foreground" />,
        },
    ];

    if (loading || authLoading) {
        return <div className="flex items-center justify-center h-screen"><Loader2 className="h-8 w-8 animate-spin" /></div>;
    }

    return (
        <div className="min-h-screen bg-background py-8">
            <div className="container px-4 mx-auto">
                <motion.div initial={{ opacity: 0, y: -20 }} animate={{ opacity: 1, y: 0 }} className="mb-8">
                    <h1 className="text-3xl font-bold">Seller Dashboard</h1>
                    <p className="text-muted-foreground">Manage your datasets and find new opportunities.</p>
                </motion.div>

                <Tabs defaultValue="overview" value={activeTab} onValueChange={setActiveTab}>
                    {/* NEW: Added Active Jobs to the tabs list */}
                    <TabsList className="grid w-full grid-cols-4 mb-8">
                        <TabsTrigger value="overview">Overview</TabsTrigger>
                        <TabsTrigger value="datasets">My Datasets ({myDatasets.length})</TabsTrigger>
                        <TabsTrigger value="active_jobs">Active Jobs ({activeJobs.length})</TabsTrigger>
                        <TabsTrigger value="jobs">Available Jobs ({availableJobs.length})</TabsTrigger>
                    </TabsList>

                    <TabsContent value="overview">
                        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                            {stats.map((stat, index) => (
                                <Card key={index}>
                                    <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                                        <CardTitle className="text-sm font-medium">{stat.title}</CardTitle>
                                        {stat.icon}
                                    </CardHeader>
                                    <CardContent>
                                        <div className="text-2xl font-bold">{stat.value}</div>
                                    </CardContent>
                                </Card>
                            ))}
                        </div>
                        {/* You can add more overview components here, like recent activity */}
                    </TabsContent>

                    <TabsContent value="datasets">
                        {/* Content for My Datasets */}
                        <div className="flex items-center justify-between mb-6">
                            <h2 className="text-xl font-semibold">Your Published Datasets</h2>
                            <Button onClick={() => navigate('/upload-dataset')}>
                                <Plus className="h-4 w-4 mr-2" />
                                Upload New Dataset
                            </Button>
                        </div>
                        {myDatasets.length === 0 ? (
                            <div className="text-center py-16"><Upload className="mx-auto h-12 w-12 text-muted-foreground" /><p className="mt-4 text-muted-foreground">You have not uploaded any datasets yet.</p></div>
                        ) : (
                            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
                                {myDatasets.map((dataset, index) => <DatasetCard key={dataset._id} dataset={dataset} index={index} />)}
                            </div>
                        )}
                    </TabsContent>
                    
                    {/* NEW: Content for Active Jobs tab */}
                    <TabsContent value="active_jobs">
                        <div className="flex items-center justify-between mb-6">
                            <h2 className="text-xl font-semibold">Your Active Jobs</h2>
                        </div>
                        {activeJobs.length === 0 ? (
                            <div className="text-center py-16"><Briefcase className="h-16 w-16 text-muted-foreground mx-auto mb-4" /><h3 className="text-lg font-medium">No active jobs.</h3><p className="text-muted-foreground">When a buyer accepts your proposal, it will appear here.</p></div>
                        ) : (
                            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
                                {activeJobs.map((request, index) => <RequestCard key={request._id} request={request} index={index} />)}
                            </div>
                        )}
                    </TabsContent>

                    <TabsContent value="jobs">
                        {/* Content for Available Jobs */}
                        <div className="flex items-center justify-between mb-6">
                            <h2 className="text-xl font-semibold">Open for Proposals</h2>
                        </div>
                        {availableJobs.length === 0 ? (
                            <div className="text-center py-16"><FileText className="h-16 w-16 text-muted-foreground mx-auto mb-4" /><h3 className="text-lg font-medium">No available jobs right now.</h3><p className="text-muted-foreground">Check back later for new data requests from buyers.</p></div>
                        ) : (
                            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
                                {availableJobs.map((request, index) => <RequestCard key={request._id} request={request} index={index} />)}
                            </div>
                        )}
                    </TabsContent>
                </Tabs>
            </div>
        </div>
    );
};

frontend\src\pages\SellerGuide.tsx:
import React from "react";
const SellerGuide = () => (
  <div className="p-8 text-center text-xl">Seller Guide coming soon!</div>
);
export default SellerGuide;

frontend\src\pages\Settings.tsx:
import React, { useEffect, useRef, useState } from 'react';
import { motion } from 'framer-motion';
import { useForm } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Switch } from '@/components/ui/switch';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Badge } from '@/components/ui/badge';
import { useAuth } from '@/contexts/AuthContext';
import { useToast } from '@/hooks/use-toast';
import { useNavigate } from 'react-router-dom';
import {
    Settings as SettingsIcon,
    User as UserIcon,
    Bell,
    Shield,
    CreditCard,
    Camera,
    Save,
    Trash2,
    Loader2,
    Zap,
    CheckCircle,
    AlertCircle,
    Eye,
} from 'lucide-react';
import { User } from '@/types'; // Import the corrected User type

// Corrected Zod schema to match the User type
const profileSchema = z.object({
    name: z.string().min(2, "Name is required."),
    email: z.string().email("Invalid email address."),
    bio: z.string().max(500, "Bio cannot exceed 500 characters.").optional().nullable(),
    location: z.string().max(100).optional().nullable(),
    website: z.string().url("Invalid URL format.").or(z.literal("")).optional().nullable(),
    phone: z.string().max(30).optional().nullable(),
    avatarUrl: z.string().url("Invalid avatar URL format.").optional().nullable(),
});

type ProfileFormValues = z.infer<typeof profileSchema>;

export const Settings: React.FC = () => {
    const { user, logout, isLoading: isAuthLoading } = useAuth();
    const { toast } = useToast();
    const navigate = useNavigate();
    const [avatarUploading, setAvatarUploading] = useState(false);
    const fileInputRef = useRef<HTMLInputElement | null>(null);

    // Stripe Connect Status
    const [stripeAccountStatus, setStripeAccountStatus] = useState<'loading' | 'connected' | 'pending' | 'not_connected'>('loading');
    const [stripeOnboardingLoading, setStripeOnboardingLoading] = useState(false);

    const {
        register,
        handleSubmit,
        reset,
        watch,
        setValue,
        formState: { errors, isSubmitting }
    } = useForm<ProfileFormValues>({
        resolver: zodResolver(profileSchema),
        defaultValues: {
            name: '',
            email: '',
            bio: '',
            location: '',
            website: '',
            phone: '',
            avatarUrl: ''
        }
    });

    // Effect to fetch user data and update the form
    useEffect(() => {
        const fetchProfile = async () => {
            const token = localStorage.getItem('token');
            if (!token || !user) return;

            try {
                // CORRECTED: Use the /api/users/me endpoint
                const res = await fetch('http://localhost:5000/api/users/me', {
                    headers: { 'Authorization': `Bearer ${token}` }
                });
                if (!res.ok) throw new Error('Failed to fetch profile');
                
                const profileData: User = await res.json();
                reset({
                    name: profileData.name || '',
                    email: profileData.email || '',
                    bio: profileData.bio || '',
                    location: profileData.location || '',
                    website: profileData.website || '',
                    phone: profileData.phone || '',
                    avatarUrl: profileData.avatarUrl || ''
                });
            } catch (error) {
                toast({ title: "Error", description: "Could not load your profile data.", variant: "destructive" });
            }
        };

        fetchProfile();
    }, [user, reset, toast]);

    // Effect to fetch Stripe status for sellers
    useEffect(() => {
        if (user?.role !== 'seller') return;

        const fetchStripeStatus = async () => {
            setStripeAccountStatus('loading');
            const token = localStorage.getItem('token');
            try {
                const res = await fetch('http://localhost:5000/api/stripe/account-status', {
                    headers: { 'Authorization': `Bearer ${token}` }
                });
                if (!res.ok) throw new Error('Failed to fetch Stripe status');

                const stripeData = await res.json();
                if (stripeData.isVerified) {
                    setStripeAccountStatus('connected');
                } else if (stripeData.details?.id) {
                    setStripeAccountStatus('pending');
                } else {
                    setStripeAccountStatus('not_connected');
                }
            } catch (error) {
                setStripeAccountStatus('not_connected');
                toast({ title: "Stripe Error", description: "Could not fetch Stripe account status.", variant: "destructive" });
            }
        };
        fetchStripeStatus();
    }, [user, toast]);

    // Handle profile form submission
    const onSubmit = async (data: ProfileFormValues) => {
        try {
            const token = localStorage.getItem('token');
            const res = await fetch('http://localhost:5000/api/users/me', {
                method: 'PUT',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            });
            if (!res.ok) {
                const errorData = await res.json();
                throw new Error(errorData.error || "Failed to save profile.");
            }
            toast({
                title: "Profile Updated",
                description: "Your information has been saved successfully.",
            });
        } catch (e: any) {
            toast({
                title: "Error updating profile",
                description: e.message,
                variant: "destructive"
            });
        }
    };

    // Handle avatar file upload
    const handleAvatarFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
        const file = e.target.files?.[0];
        if (!file) return;

        setAvatarUploading(true);
        const token = localStorage.getItem('token');
        const formData = new FormData();
        formData.append('avatar', file);

        try {
            const res = await fetch('http://localhost:5000/api/users/me/avatar', {
                method: 'POST',
                headers: { 'Authorization': `Bearer ${token}` },
                body: formData,
            });

            if (!res.ok) {
                const errorData = await res.json();
                throw new Error(errorData.error || "Please try again.");
            }

            const data = await res.json();
            // CORRECTED: Use 'avatarUrl'
            setValue("avatarUrl", data.user.avatarUrl, { shouldDirty: true });
            
            // Update user in localStorage to reflect new avatar immediately
            const currentUserData = JSON.parse(localStorage.getItem('user') || '{}');
            currentUserData.avatarUrl = data.user.avatarUrl;
            localStorage.setItem('user', JSON.stringify(currentUserData));

            toast({ title: "Avatar updated", description: "Your profile picture has been changed." });
        } catch (err: any) {
            toast({ title: "Failed to upload avatar", description: err.message, variant: "destructive" });
        } finally {
            setAvatarUploading(false);
        }
    };

    // Handle Stripe Connect button click
    const handleConnectStripe = async () => {
        setStripeOnboardingLoading(true);
        try {
            const token = localStorage.getItem('token');
            const res = await fetch('http://localhost:5000/api/stripe/onboard-seller', {
                method: 'POST',
                headers: { 'Authorization': `Bearer ${token}` },
            });
            const data = await res.json();
            if (!res.ok) throw new Error(data.error || 'Failed to initiate Stripe onboarding.');
            
            window.location.href = data.url;
        } catch (err: any) {
            toast({ title: 'Stripe Connection Failed', description: err.message, variant: 'destructive' });
        } finally {
            setStripeOnboardingLoading(false);
        }
    };
    
    if (isAuthLoading) {
        return <div className="flex justify-center items-center h-screen"><Loader2 className="h-8 w-8 animate-spin" /></div>;
    }

    if (!user) {
        return (
            <div className="flex justify-center items-center h-screen">
                <Card className="p-8 text-center">
                    <CardTitle>Access Denied</CardTitle>
                    <CardDescription>Please sign in to view your settings.</CardDescription>
                    <Button onClick={() => navigate('/auth')} className="mt-4">Sign In</Button>
                </Card>
            </div>
        );
    }

    return (
        <div className="min-h-screen bg-muted/40 py-8">
            <div className="container mx-auto max-w-4xl">
                <motion.div initial={{ opacity: 0, y: -20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.5 }}>
                    <h1 className="text-3xl font-bold text-foreground mb-2">Account Settings</h1>
                    <p className="text-muted-foreground">Manage your account preferences and privacy settings.</p>
                </motion.div>

                <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ duration: 0.5, delay: 0.2 }}>
                    <Tabs defaultValue="profile" className="mt-6">
                        <TabsList className="grid w-full grid-cols-2 md:grid-cols-4">
                            <TabsTrigger value="profile"><UserIcon className="h-4 w-4 mr-2" />Profile</TabsTrigger>
                            <TabsTrigger value="notifications"><Bell className="h-4 w-4 mr-2" />Notifications</TabsTrigger>
                            <TabsTrigger value="privacy"><Shield className="h-4 w-4 mr-2" />Privacy</TabsTrigger>
                            <TabsTrigger value="billing"><CreditCard className="h-4 w-4 mr-2" />Billing</TabsTrigger>
                        </TabsList>

                        {/* Profile Tab */}
                        <TabsContent value="profile" className="mt-6">
                            <form onSubmit={handleSubmit(onSubmit)}>
                                <Card>
                                    <CardHeader>
                                        <CardTitle>Profile Information</CardTitle>
                                        <CardDescription>Update your personal details.</CardDescription>
                                    </CardHeader>
                                    <CardContent className="space-y-6">
                                        <div className="flex items-center space-x-4">
                                            <Avatar className="h-20 w-20">
                                                {/* CORRECTED: Use 'avatarUrl' */}
                                                <AvatarImage src={watch("avatarUrl") || ""} />
                                                <AvatarFallback>{user.name?.charAt(0)}</AvatarFallback>
                                            </Avatar>
                                            <div>
                                                <Button type="button" variant="outline" onClick={() => fileInputRef.current?.click()} disabled={avatarUploading}>
                                                    {avatarUploading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Camera className="mr-2 h-4 w-4" />}
                                                    {avatarUploading ? "Uploading..." : "Change Photo"}
                                                </Button>
                                                <input type="file" accept="image/*" className="hidden" ref={fileInputRef} onChange={handleAvatarFileChange} />
                                                <p className="text-xs text-muted-foreground mt-2">JPG, PNG, GIF. Max 5MB.</p>
                                            </div>
                                        </div>
                                        
                                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                            <div>
                                                <Label htmlFor="name">Full Name</Label>
                                                <Input id="name" {...register("name")} />
                                                {errors.name && <p className="text-xs text-destructive mt-1">{errors.name.message}</p>}
                                            </div>
                                            <div>
                                                <Label htmlFor="email">Email</Label>
                                                <Input id="email" {...register("email")} disabled />
                                            </div>
                                            <div>
                                                <Label htmlFor="phone">Phone</Label>
                                                <Input id="phone" {...register("phone")} />
                                            </div>
                                            <div>
                                                <Label htmlFor="location">Location</Label>
                                                <Input id="location" {...register("location")} />
                                            </div>
                                            <div className="md:col-span-2">
                                                <Label htmlFor="website">Website</Label>
                                                <Input id="website" {...register("website")} />
                                                {errors.website && <p className="text-xs text-destructive mt-1">{errors.website.message}</p>}
                                            </div>
                                            <div className="md:col-span-2">
                                                <Label htmlFor="bio">Bio</Label>
                                                <Textarea id="bio" {...register("bio")} rows={4} />
                                                {errors.bio && <p className="text-xs text-destructive mt-1">{errors.bio.message}</p>}
                                            </div>
                                        </div>
                                        <Button type="submit" disabled={isSubmitting || avatarUploading}>
                                            <Save className="h-4 w-4 mr-2" />
                                            {isSubmitting ? "Saving..." : "Save Changes"}
                                        </Button>
                                    </CardContent>
                                </Card>
                            </form>
                        </TabsContent>

                        {/* Notifications, Privacy, Billing Tabs (mocked) */}
                        <TabsContent value="notifications" className="mt-6">
                            <Card><CardHeader><CardTitle>Notifications</CardTitle></CardHeader><CardContent><p>Notification settings coming soon.</p></CardContent></Card>
                        </TabsContent>
                        <TabsContent value="privacy" className="mt-6">
                            <Card><CardHeader><CardTitle>Privacy</CardTitle></CardHeader><CardContent><p>Privacy settings coming soon.</p></CardContent></Card>
                        </TabsContent>
                        <TabsContent value="billing" className="mt-6">
                            <Card>
                                <CardHeader><CardTitle>Billing</CardTitle></CardHeader>
                                <CardContent>
                                    {user.role === 'seller' ? (
                                        <div className="space-y-4">
                                            <h3 className="font-semibold">Stripe Connect</h3>
                                            {stripeAccountStatus === 'loading' && <p>Loading Stripe status...</p>}
                                            {stripeAccountStatus === 'not_connected' && (
                                                <div>
                                                    <p className="text-muted-foreground mb-4">Connect with Stripe to receive payments.</p>
                                                    <Button onClick={handleConnectStripe} disabled={stripeOnboardingLoading}>
                                                        {stripeOnboardingLoading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Zap className="mr-2 h-4 w-4" />}
                                                        Connect Stripe
                                                    </Button>
                                                </div>
                                            )}
                                            {stripeAccountStatus === 'pending' && (
                                                <div className="p-4 bg-yellow-100 border border-yellow-200 rounded-md">
                                                    <p className="text-yellow-800">Your account is pending verification. Please complete onboarding.</p>
                                                    <Button variant="link" onClick={handleConnectStripe}>Resume Onboarding</Button>
                                                </div>
                                            )}
                                            {stripeAccountStatus === 'connected' && (
                                                <div className="p-4 bg-green-100 border border-green-200 rounded-md">
                                                    <p className="text-green-800 font-semibold">Your Stripe account is connected.</p>
                                                </div>
                                            )}
                                        </div>
                                    ) : (
                                        <p>Billing information for buyers coming soon.</p>
                                    )}
                                </CardContent>
                            </Card>
                        </TabsContent>
                    </Tabs>
                </motion.div>
            </div>
        </div>
    );
};

frontend\src\pages\Terms.tsx:
import React from "react";
const Terms = () => (
  <div className="p-8 text-center text-xl">Terms of Service coming soon!</div>
);
export default Terms;

frontend\src\pages\UploadDataset.tsx:
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { useNavigate } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { Checkbox } from '@/components/ui/checkbox';
import { useToast } from '@/hooks/use-toast';
import { useAuth } from '@/contexts/AuthContext';
import {
  Upload,
  FileText,
  DollarSign,
  Info,
  CheckCircle,
  X,
  Plus,
  AlertTriangle,
  Loader2,
} from 'lucide-react';
import { categories, formats } from '@/data/mockData';

export const UploadDataset: React.FC = () => {
  const navigate = useNavigate();
  const { user } = useAuth();
  const { toast } = useToast();
  const [currentStep, setCurrentStep] = useState(1);
  const [isSubmitting, setIsSubmitting] = useState(false);

  const [formData, setFormData] = useState({
    title: '',
    description: '',
    category: '',
    format: '',
    price: '',
    file: null as File | null,
    tags: [] as string[],
    size: '',
    license: '',
    updateFrequency: '',
    termsAccepted: false,
    dataType: '',
    sampleData: '', // FIX: Added sampleData to the state object
  });

  const [newTag, setNewTag] = useState('');

  const steps = [
    { number: 1, title: 'Dataset Details', icon: <FileText className="h-5 w-5" /> },
    { number: 2, title: 'Upload & Pricing', icon: <Upload className="h-5 w-5" /> },
    { number: 3, title: 'Review & Publish', icon: <CheckCircle className="h-5 w-5" /> },
  ];

  const handleAddTag = () => {
    if (newTag.trim() && !formData.tags.includes(newTag.trim())) {
      setFormData({
        ...formData,
        tags: [...formData.tags, newTag.trim()],
      });
      setNewTag('');
    }
  };

  const handleRemoveTag = (tagToRemove: string) => {
    setFormData({
      ...formData,
      tags: formData.tags.filter((tag) => tag !== tagToRemove),
    });
  };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      setFormData({
        ...formData,
        file,
        size: `${(file.size / (1024 * 1024)).toFixed(1)} MB`,
      });
    }
  };

  const handleNext = () => {
    if (isStepValid()) {
      if (currentStep < 3) {
        setCurrentStep(currentStep + 1);
      }
    } else {
      toast({
        title: 'Validation Error',
        description: 'Please fill in all required fields for the current step.',
        variant: 'destructive',
      });
    }
  };

  const handlePrevious = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1);
    }
  };

  const handleSubmit = async () => {
    setIsSubmitting(true);

    const token = localStorage.getItem('token');
    if (!user || !token) {
      toast({
        title: 'Authentication Required',
        description: 'Please sign in to upload a dataset.',
        variant: 'destructive',
      });
      setIsSubmitting(false);
      return;
    }
    if (user.role !== 'seller') {
      toast({
        title: 'Access Denied',
        description: 'Only sellers can upload datasets.',
        variant: 'destructive',
      });
      setIsSubmitting(false);
      return;
    }

    const formPayload = new FormData();

    Object.entries(formData).forEach(([key, value]) => {
      if (value !== null) {
        if (key === 'tags' && Array.isArray(value)) {
          value.forEach((tag) => formPayload.append('tags[]', tag));
        } else if (key === 'file' && value instanceof File) {
          formPayload.append('file', value);
        } else if (typeof value === 'string') {
          formPayload.append(key, value);
        }
      }
    });

    try {
      const res = await fetch('http://localhost:5000/api/datasets', {
        method: 'POST',
        headers: {
          Authorization: `Bearer ${token}`,
        },
        body: formPayload,
      });

      if (!res.ok) {
        const errorData = await res.json();
        throw new Error(errorData.error || 'Upload failed');
      }

      toast({
        title: 'Success!',
        description: 'Your dataset has been uploaded and is under review.',
      });

      navigate('/seller-dashboard');
    } catch (err: any) {
      console.error('Upload error:', err);
      toast({
        title: 'Upload failed',
        description: err.message || 'Please try again later.',
        variant: 'destructive',
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  const isStepValid = () => {
    switch (currentStep) {
      case 1:
        return (
          formData.title.trim() !== '' &&
          formData.description.trim() !== '' &&
          formData.category.trim() !== '' &&
          formData.format.trim() !== '' &&
          formData.dataType.trim() !== ''
        );
      case 2:
        return (
          formData.file !== null &&
          formData.price.trim() !== '' &&
          !isNaN(Number(formData.price)) &&
          Number(formData.price) >= 0 &&
          formData.license.trim() !== ''
        );
      case 3:
        return formData.termsAccepted;
      default:
        return false;
    }
  };

  if (!user || user.role !== 'seller') {
    return (
      <div className="min-h-screen bg-background-secondary flex items-center justify-center p-4">
        <Card className="max-w-md">
          <CardContent className="p-6 text-center">
            <AlertTriangle className="h-12 w-12 text-warning mx-auto mb-4" />
            <h2 className="text-xl font-heading font-semibold mb-2">Access Restricted</h2>
            <p className="text-muted-foreground mb-4">
              Only sellers can upload datasets. Please sign in with a seller account.
            </p>
            <Button onClick={() => navigate('/auth?mode=login&role=seller')} className="w-full">
              Sign In as Seller
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-background py-8">
      <div className="container px-4 mx-auto max-w-4xl">
        {/* Header */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
          className="mb-8"
        >
          <h1 className="text-3xl font-heading font-bold text-foreground mb-2">Upload New Dataset</h1>
          <p className="text-lg text-muted-foreground">Share your data with the community and start earning</p>
        </motion.div>

        {/* Progress Steps */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.1 }}
          className="mb-8"
        >
          <div className="flex items-center justify-between">
            {steps.map((step, index) => (
              <div key={step.number} className="flex items-center">
                <div
                  className={`flex items-center justify-center w-12 h-12 rounded-full border-2 ${
                    currentStep >= step.number
                      ? 'bg-primary border-primary text-primary-foreground'
                      : 'border-muted text-muted-foreground'
                  }`}
                >
                  {currentStep > step.number ? <CheckCircle className="h-6 w-6" /> : step.icon}
                </div>
                <div className="ml-3 hidden md:block">
                  <div
                    className={`text-sm font-medium ${
                      currentStep >= step.number ? 'text-foreground' : 'text-muted-foreground'
                    }`}
                  >
                    Step {step.number}
                  </div>
                  <div
                    className={`text-sm ${
                      currentStep >= step.number ? 'text-foreground' : 'text-muted-foreground'
                    }`}
                  >
                    {step.title}
                  </div>
                </div>
                {index < steps.length - 1 && (
                  <div
                    className={`w-16 h-0.5 mx-4 ${currentStep > step.number ? 'bg-primary' : 'bg-muted'}`}
                  />
                )}
              </div>
            ))}
          </div>
        </motion.div>

        {/* Form Content */}
        <motion.div
          key={currentStep}
          initial={{ opacity: 0, x: 20 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ duration: 0.4 }}
        >
          <Card className="border-0 shadow-medium">
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                {steps[currentStep - 1].icon}
                <span>{steps[currentStep - 1].title}</span>
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              {/* Step 1: Dataset Details */}
              {currentStep === 1 && (
                <div className="space-y-6">
                  <div className="grid md:grid-cols-2 gap-6">
                    <div className="space-y-2">
                      <Label htmlFor="title">Dataset Title *</Label>
                      <Input
                        id="title"
                        placeholder="Enter a descriptive title for your dataset"
                        value={formData.title}
                        onChange={(e) => setFormData({ ...formData, title: e.target.value })}
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="category">Category *</Label>
                      <Select
                        value={formData.category}
                        onValueChange={(value) => setFormData({ ...formData, category: value })}
                      >
                        <SelectTrigger>
                          <SelectValue placeholder="Select a category" />
                        </SelectTrigger>
                        <SelectContent>
                          {categories.slice(1).map((category) => (
                            <SelectItem key={category} value={category}>
                              {category}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="description">Description *</Label>
                    <Textarea
                      id="description"
                      placeholder="Provide a detailed description of your dataset, including what it contains, how it was collected, and potential use cases..."
                      rows={6}
                      value={formData.description}
                      onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                    />
                  </div>

                  <div className="grid md:grid-cols-2 gap-6">
                    <div className="space-y-2">
                      <Label htmlFor="dataType">Dataset Type *</Label>
                      <Select
                        value={formData.dataType}
                        onValueChange={(value) => setFormData({ ...formData, dataType: value })}
                      >
                        <SelectTrigger>
                          <SelectValue placeholder="Is this Training or Testing data?" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="training">Training Data</SelectItem>
                          <SelectItem value="testing">Testing Data</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>

                    <div className="space-y-2">
                      <Label htmlFor="format">Format *</Label>
                      <Select
                        value={formData.format}
                        onValueChange={(value) => setFormData({ ...formData, format: value })}
                      >
                        <SelectTrigger>
                          <SelectValue placeholder="Select file format" />
                        </SelectTrigger>
                        <SelectContent>
                          {formats.map((format) => (
                            <SelectItem key={format} value={format}>
                              {format}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="updateFrequency">Update Frequency</Label>
                    <Select
                      value={formData.updateFrequency}
                      onValueChange={(value) => setFormData({ ...formData, updateFrequency: value })}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="How often is this updated?" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="static">Static (No updates)</SelectItem>
                        <SelectItem value="weekly">Weekly</SelectItem>
                        <SelectItem value="monthly">Monthly</SelectItem>
                        <SelectItem value="quarterly">Quarterly</SelectItem>
                        <SelectItem value="annually">Annually</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div className="space-y-2">
                    <Label>Tags</Label>
                    <div className="flex space-x-2">
                      <Input
                        placeholder="Add tags to help buyers find your dataset"
                        value={newTag}
                        onChange={(e) => setNewTag(e.target.value)}
                        onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), handleAddTag())}
                      />
                      <Button type="button" onClick={handleAddTag} variant="outline">
                        <Plus className="h-4 w-4" />
                      </Button>
                    </div>
                    {formData.tags.length > 0 && (
                      <div className="flex flex-wrap gap-2 mt-2">
                        {formData.tags.map((tag) => (
                          <Badge key={tag} variant="secondary" className="flex items-center space-x-1">
                            <span>{tag}</span>
                            <Button
                              type="button"
                              variant="ghost"
                              size="sm"
                              className="h-auto p-0 ml-1"
                              onClick={() => handleRemoveTag(tag)}
                            >
                              <X className="h-3 w-3" />
                            </Button>
                          </Badge>
                        ))}
                      </div>
                    )}
                  </div>
                </div>
              )}

              {/* Step 2: Upload & Pricing */}
              {currentStep === 2 && (
                <div className="space-y-6">
                  <div className="space-y-2">
                    <Label htmlFor="file">Upload Dataset File *</Label>
                    <div className="border-2 border-dashed border-border rounded-lg p-8 text-center">
                      <input
                        type="file"
                        id="file"
                        className="hidden"
                        onChange={handleFileChange}
                        accept=".csv,.json,.xlsx,.xml,.parquet,.sql"
                      />
                      <label htmlFor="file" className="cursor-pointer">
                        <Upload className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                        <div className="text-lg font-medium text-foreground mb-2">Choose a file or drag it here</div>
                        <div className="text-sm text-muted-foreground">Supported formats: CSV, JSON, Excel, XML, Parquet, SQL</div>
                        {formData.file && (
                          <div className="mt-4 p-3 bg-primary/10 rounded-lg">
                            <div className="font-medium text-primary">{formData.file.name}</div>
                            <div className="text-sm text-muted-foreground">{formData.size}</div>
                          </div>
                        )}
                      </label>
                    </div>
                  </div>

                  <div className="grid md:grid-cols-2 gap-6">
                    <div className="space-y-2">
                      <Label htmlFor="price">Price (USD) *</Label>
                      <div className="relative">
                        <DollarSign className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4" />
                        <Input
                          id="price"
                          type="number"
                          placeholder="0.00"
                          className="pl-10"
                          value={formData.price}
                          onChange={(e) => setFormData({ ...formData, price: e.target.value })}
                        />
                      </div>
                      <div className="text-xs text-muted-foreground">You'll receive 85% of the sale price</div>
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="license">License Type *</Label>
                      <Select
                        value={formData.license}
                        onValueChange={(value) => setFormData({ ...formData, license: value })}
                      >
                        <SelectTrigger>
                          <SelectValue placeholder="Select license type" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="commercial">Commercial Use</SelectItem>
                          <SelectItem value="non-commercial">Non-Commercial Only</SelectItem>
                          <SelectItem value="academic">Academic Use Only</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="sampleData">Sample Data (Optional)</Label>
                    <Textarea
                      id="sampleData"
                      placeholder="Provide a few rows of sample data to help buyers understand the structure..."
                      rows={4}
                      value={formData.sampleData}
                      onChange={(e) => setFormData({ ...formData, sampleData: e.target.value })}
                    />
                  </div>

                  <Card className="border-accent-blue/20 bg-accent-blue/5">
                    <CardContent className="p-4">
                      <div className="flex items-start space-x-3">
                        <Info className="h-5 w-5 text-accent-blue mt-0.5" />
                        <div>
                          <h4 className="font-medium text-foreground mb-1">Pricing Guidelines</h4>
                          <p className="text-sm text-muted-foreground">This is a demo. Use any email and password to sign in or create an account.</p>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </div>
              )}

              {/* Step 3: Review & Publish */}
              {currentStep === 3 && (
                <div className="space-y-6">
                  <div className="grid md:grid-cols-2 gap-8">
                    <div>
                      <h3 className="text-lg font-semibold text-foreground mb-4">Dataset Summary</h3>
                      <div className="space-y-3">
                        <div>
                          <Label className="text-xs text-muted-foreground">Title</Label>
                          <div className="font-medium text-foreground">{formData.title}</div>
                        </div>
                        <div>
                          <Label className="text-xs text-muted-foreground">Category</Label>
                          <div className="font-medium text-foreground">{formData.category}</div>
                        </div>
                        <div>
                          <Label className="text-xs text-muted-foreground">Format</Label>
                          <div className="font-medium text-foreground">{formData.format}</div>
                        </div>
                        <div>
                          <Label className="text-xs text-muted-foreground">Price</Label>
                          <div className="font-medium text-foreground">${formData.price}</div>
                        </div>
                        <div>
                          <Label className="text-xs text-muted-foreground">Dataset Type</Label>
                          <div className="font-medium text-foreground capitalize">{formData.dataType}</div>
                        </div>
                        <div>
                          <Label className="text-xs text-muted-foreground">File</Label>
                          <div className="font-medium text-foreground">{formData.file?.name}</div>
                        </div>
                        {formData.tags.length > 0 && (
                          <div>
                            <Label className="text-xs text-muted-foreground">Tags</Label>
                            <div className="flex flex-wrap gap-1 mt-1">
                              {formData.tags.map((tag) => (
                                <Badge key={tag} variant="outline" className="text-xs">
                                  {tag}
                                </Badge>
                              ))}
                            </div>
                          </div>
                        )}
                      </div>
                    </div>

                    <div>
                      <h3 className="text-lg font-semibold text-foreground mb-4">Description</h3>
                      <div className="text-sm text-muted-foreground leading-relaxed">
                        {formData.description}
                      </div>
                    </div>
                  </div>

                  <Card className="border-warning/20 bg-warning/5">
                    <CardContent className="p-4">
                      <div className="flex items-start space-x-3">
                        <AlertTriangle className="h-5 w-5 text-warning mt-0.5" />
                        <div>
                          <h4 className="font-medium text-foreground mb-1">Review Process</h4>
                          <p className="text-sm text-muted-foreground">
                            Your dataset will be reviewed by our team within 24-48 hours. We'll check for data quality, accuracy of description, and compliance with our guidelines.
                          </p>
                        </div>
                      </div>
                    </CardContent>
                  </Card>

                  <div className="flex items-center space-x-2">
                    <Checkbox
                      id="terms"
                      checked={formData.termsAccepted}
                      onCheckedChange={(checked) => setFormData({ ...formData, termsAccepted: checked as boolean })}
                    />
                    <Label htmlFor="terms" className="text-sm">
                      I agree to the <a href="#" className="text-primary hover:underline">Terms of Service</a> and confirm that I have the right to distribute this data
                    </Label>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        </motion.div>

        {/* Navigation */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.2 }}
          className="flex justify-between mt-8"
        >
          <Button variant="outline" onClick={handlePrevious} disabled={currentStep === 1}>
            Previous
          </Button>

          <div className="flex space-x-4">
            {currentStep < 3 ? (
              <Button onClick={handleNext} disabled={!isStepValid()}>
                Next
              </Button>
            ) : (
              <Button onClick={handleSubmit} disabled={!isStepValid() || isSubmitting}>
                {isSubmitting ? (
                  <>
                    <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                    Uploading...
                  </>
                ) : (
                  <>
                    <Upload className="h-4 w-4 mr-2" />
                    Publish Dataset
                  </>
                )}
              </Button>
            )}
          </div>
        </motion.div>
      </div>
    </div>
  );
};

frontend\src\types\index.ts:
// frontend/src/types/index.ts

// ----- Types aligned with Backend Mongoose Models -----

export type UserRole = 'buyer' | 'seller' | 'admin';

export interface User {
  id: string;
  _id?: string;
  email: string;
  name: string;
  role: UserRole;
  avatarUrl?: string; // Corrected to avatarUrl for consistency
  bio?: string;
  location?: string;
  website?: string;
  phone?: string;
  createdAt?: string;
  updatedAt?: string;
  rating?: number;
  totalDatasets?: number;
  joinedDate?: string;
  stripeAccountId?: string;
  isStripeVerified?: boolean;
}

export interface Dataset {
  id: string;
  _id?: string;
  title: string;
  description: string;
  category: string;
  format: string;
  price: number;
  license: string;
  updateFrequency?: string;
  tags: string[];
  size?: string;
  seller: string | User;
  file?: {
    filename: string;
    mimetype: string;
    path: string;
    size: number;
  };
  dataType: 'training' | 'testing';
  isAvailable?: boolean;
  createdAt?: string;
  updatedAt?: string;
  downloads?: number;
  rating?: number | string;
  reviews?: number;
  previewUrl?: string;
  sampleData?: any[];
  earnings?: number;
  status?: string;
}

export interface DatasetRequest {
  id: string;
  _id?: string;
  title: string;
  description: string;
  budget: {
    min: number;
    max: number;
  };
  category: string;
  tags: string[];
  deadline: string;
  status: 'open' | 'in_progress' | 'fulfilled' | 'cancelled';
  buyer: string | User;
  createdAt?: string;
  updatedAt?: string;
  proposals?: any[];
}

export interface Proposal {
  id: string;
  _id?: string;
  request: string | DatasetRequest;
  seller: string | User;
  message: string;
  price: number;
  deliveryDays: number;
  status: "pending" | "accepted" | "rejected" | "completed" | "paid" | "cancelled";
  paymentIntentId?: string;
  createdAt?: string;
  updatedAt?: string;
}

frontend\src\App.tsx:
// frontend/src/App.tsx
import { Toaster } from "@/components/ui/toaster";
import { Toaster as Sonner } from "@/components/ui/sonner";
import { TooltipProvider } from "@/components/ui/tooltip";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { BrowserRouter, Routes, Route } from "react-router-dom";
import { AuthProvider } from "@/contexts/AuthContext";
import { Navbar } from "@/components/Layout/Navbar";
import { Footer } from "@/components/Layout/Footer";

// Page Imports
import { Landing } from "./pages/Landing";
import Auth from "./pages/Auth";
import { Marketplace } from "./pages/Marketplace";
import { BuyerDashboard } from "./pages/BuyerDashboard";
import { SellerDashboard } from "./pages/SellerDashboard";
import { UploadDataset } from "./pages/UploadDataset";
import { PostRequest } from "./pages/PostRequest";
import { Settings } from "./pages/Settings";
import NotFound from "./pages/NotFound";
import BuyerRequests from "./pages/BuyerRequests";
import MyOffers from "./pages/MyOffers";
import CheckoutPage from "./pages/Checkout";
import CheckoutSuccessPage from "./pages/CheckoutSuccess";
import { MessagesPage } from "./pages/MessagesPage";
import { RequestDetailsPage } from "./pages/RequestDetailsPage"; // <-- NEW IMPORT

// Placeholder Page Imports
import SellerGuide from "./pages/SellerGuide";
import Pricing from "./pages/Pricing";
import QualityStandards from "./pages/QualityStandards";
import Help from "./pages/Help";
import Contact from "./pages/Contact";
import Privacy from "./pages/Privacy";
import Terms from "./pages/Terms";

const queryClient = new QueryClient();

const App = () => (
  <QueryClientProvider client={queryClient}>
    <AuthProvider>
      <TooltipProvider>
        <Toaster />
        <Sonner />
        <BrowserRouter>
          <div className="flex flex-col min-h-screen">
            <Navbar />
            <main className="flex-1">
              <Routes>
                {/* Core Routes */}
                <Route path="/" element={<Landing />} />
                <Route path="/auth" element={<Auth />} />
                <Route path="/marketplace" element={<Marketplace />} />
                <Route path="/messages" element={<MessagesPage />} />
                
                {/* NEW: Route for viewing a specific request's details */}
                <Route path="/request/:requestId" element={<RequestDetailsPage />} />

                {/* Dashboards */}
                <Route path="/buyer-dashboard" element={<BuyerDashboard />} />
                <Route path="/seller-dashboard" element={<SellerDashboard />} />
                
                {/* Actions */}
                <Route path="/upload-dataset" element={<UploadDataset />} />
                <Route path="/post-request" element={<PostRequest />} />
                <Route path="/settings" element={<Settings />} />

                {/* Sub-dashboard pages */}
                <Route path="/buyer-requests" element={<BuyerRequests />} />
                <Route path="/my-proposals" element={<MyOffers />} />

                {/* Payment Routes */}
                <Route path="/checkout/:datasetId" element={<CheckoutPage />} />
                <Route path="/checkout-success" element={<CheckoutSuccessPage />} />

                {/* Static/Placeholder Routes */}
                <Route path="/seller-guide" element={<SellerGuide />} />
                <Route path="/pricing" element={<Pricing />} />
                <Route path="/quality-standards" element={<QualityStandards />} />
                <Route path="/help" element={<Help />} />
                <Route path="/contact" element={<Contact />} />
                <Route path="/privacy" element={<Privacy />} />
                <Route path="/terms" element={<Terms />} />

                {/* Catch-all 404 Route */}
                <Route path="*" element={<NotFound />} />
              </Routes>
            </main>
            <Footer />
          </div>
        </BrowserRouter>
      </TooltipProvider>
    </AuthProvider>
  </QueryClientProvider>
);

export default App;

frontend\src\index.css:
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Enhanced Dataset Marketplace - Human-Centered Design System */

@import url('https://fonts.googleapis.com/css2?family=Satoshi:wght@300;400;500;600;700;800&family=Inter:wght@300;400;500;600;700&display=swap');

@layer base {
  :root {
    /* Light Theme Brand + UI Tokens */ 
    --background: 214 24% 97%;
    --background-secondary: 210 20% 94%;
    --foreground: 168 67% 30%; /* DataNestX teal */
    --card: 0 0% 100%;
    --card-foreground: 168 67% 30%;
    --card-hover: 212 33% 95%;

    --popover: 0 0% 100%;
    --popover-foreground: 168 67% 30%;

    /* Brand Colors */
    --primary: 168 67% 30%;          /* #198077 (logo) */
    --primary-hover: 168 67% 23%;
    --primary-foreground: 0 0% 100%;

    --accent-orange: 25 95% 53%;
    --accent-teal: 178 78% 57%;
    --accent-pink: 330 81% 60%;
    --accent-amber: 43 96% 56%;

    --secondary: 210 20% 94%;
    --secondary-foreground: 215 28% 17%;
    --muted: 210 20% 94%;
    --muted-foreground: 215 16% 47%;
    --accent: 210 20% 94%;
    --accent-foreground: 215 28% 17%;

    --destructive: 0 84% 60%;
    --destructive-foreground: 0 0% 100%;
    --success: 158 64% 52%;
    --success-foreground: 0 0% 100%;
    --warning: 43 96% 56%;
    --warning-foreground: 0 0% 100%;

    --border: 214 20% 88%;
    --input: 214 20% 88%;
    --ring: 168 67% 30%;

    --radius: 1rem;
    --radius-sm: 0.5rem;
    --radius-lg: 1.5rem;

    --shadow-soft: 0 1px 3px 0 rgb(0 0 0 / 0.08), 0 1px 2px -1px rgb(0 0 0 / 0.04);
    --shadow-medium: 0 4px 6px -1px rgb(0 0 0 / 0.08), 0 2px 4px -2px rgb(0 0 0 / 0.06);
    --shadow-hover: 0 10px 15px -3px rgb(0 0 0 / 0.08), 0 4px 6px -4px rgb(0 0 0 / 0.05);
    --shadow-strong: 0 20px 25px -5px rgb(0 0 0 / 0.08), 0 8px 10px -6px rgb(0 0 0 / 0.04);

    --font-heading: 'Satoshi', 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    --font-body: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;

    --sidebar-background: 214 24% 97%;
    --sidebar-foreground: 215 16% 47%;
    --sidebar-primary: 168 67% 30%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 210 20% 94%;
    --sidebar-accent-foreground: 215 16% 47%;
    --sidebar-border: 214 20% 88%;
    --sidebar-ring: 168 67% 30%;
  }

  .dark {
    --background: 222 84% 5%;
    --background-secondary: 217 33% 8%;
    --foreground: 168 67% 45%;
    --card: 222 84% 5%;
    --card-foreground: 168 67% 45%;
    --card-hover: 217 33% 8%;
    --popover: 222 84% 5%;
    --popover-foreground: 168 67% 45%;
    --primary: 168 67% 45%;
    --primary-hover: 168 67% 39%;
    --primary-foreground: 222 84% 5%;
    --secondary: 217 33% 8%;
    --secondary-foreground: 210 40% 98%;
    --muted: 217 33% 8%;
    --muted-foreground: 215 21% 65%;
    --accent: 217 33% 8%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 84% 60%;
    --destructive-foreground: 210 40% 98%;
    --success: 158 64% 52%;
    --success-foreground: 222 84% 5%;
    --warning: 43 96% 56%;
    --warning-foreground: 222 84% 5%;
    --border: 217 33% 8%;
    --input: 217 33% 8%;
    --ring: 168 67% 45%;
    --sidebar-background: 222 84% 5%;
    --sidebar-foreground: 215 21% 65%;
    --sidebar-primary: 168 67% 45%;
    --sidebar-primary-foreground: 222 84% 5%;
    --sidebar-accent: 217 33% 8%;
    --sidebar-accent-foreground: 215 21% 65%;
    --sidebar-border: 217 33% 8%;
    --sidebar-ring: 168 67% 45%;
  }

  * {
    @apply border-border;
  }

  body {
    @apply bg-background text-foreground font-body antialiased;
    font-feature-settings: "rlig" 1, "calt" 1;
  }

  h1, h2, h3, h4, h5, h6 {
    @apply font-heading;
    font-feature-settings: "ss01" 1, "ss02" 1;
    color: hsl(var(--primary)); /* Headings in brand color */
  }

  .text-brand {
    color: hsl(var(--primary));
  }
}

/* Human-centered gradients */
@layer utilities {
  .gradient-primary {
    background: linear-gradient(135deg, hsl(var(--primary)) 0%, hsl(var(--accent-pink)) 100%);
  }
  .gradient-secondary {
    background: linear-gradient(135deg, hsl(var(--accent-teal)) 0%, hsl(var(--primary)) 100%);
  }
  .gradient-accent {
    background: linear-gradient(135deg, hsl(var(--accent-orange)) 0%, hsl(var(--accent-amber)) 100%);
  }
  .gradient-warm {
    background: linear-gradient(135deg, hsl(var(--accent-orange)) 0%, hsl(var(--accent-pink)) 100%);
  }
  .text-gradient {
    background: linear-gradient(135deg, hsl(var(--primary)) 0%, hsl(var(--accent-pink)) 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }
  .text-gradient-warm {
    background: linear-gradient(135deg, hsl(var(--accent-orange)) 0%, hsl(var(--accent-teal)) 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  /* Enhanced animations */
  .animate-float {
    animation: float 6s ease-in-out infinite;
  }
  .animate-bounce-slow {
    animation: bounce 3s infinite;
  }
  .animate-pulse-slow {
    animation: pulse 4s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }
  @keyframes float {
    0%, 100% { transform: translateY(0px); }
    50% { transform: translateY(-20px); }
  }

  /* Interactive elements */
  .hover-lift {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }
  .hover-lift:hover {
    transform: translateY(-8px);
    box-shadow: var(--shadow-hover);
  }
  .hover-glow:hover {
    box-shadow: 0 0 0 1px hsl(var(--primary) / 0.5), 
                0 0 0 4px hsl(var(--primary) / 0.1);
  }
}

/* Custom scrollbar */
::-webkit-scrollbar {
  width: 8px;
}
::-webkit-scrollbar-track {
  background: hsl(var(--background-secondary));
}
::-webkit-scrollbar-thumb {
  background: hsl(var(--muted-foreground) / 0.3);
  border-radius: 4px;
}
::-webkit-scrollbar-thumb:hover {
  background: hsl(var(--muted-foreground) / 0.5);
}

frontend\src\main.tsx:
import { createRoot } from 'react-dom/client'
import App from './App.tsx'
import './index.css'

createRoot(document.getElementById("root")!).render(<App />);
